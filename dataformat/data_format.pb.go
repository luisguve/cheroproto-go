// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data_format.proto

// package dataformat defines the format in which the data will be stored
// in the database.

package dataformat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "github.com/luisguve/cheroproto-go/context"
	metadata "github.com/luisguve/cheroproto-go/metadata"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Notif_NotifType int32

const (
	Notif_UNKNOWN           Notif_NotifType = 0
	Notif_UPVOTE            Notif_NotifType = 1
	Notif_UPVOTE_COMMENT    Notif_NotifType = 2
	Notif_UPVOTE_SUBCOMMENT Notif_NotifType = 3
	Notif_COMMENT           Notif_NotifType = 4
	Notif_SUBCOMMENT        Notif_NotifType = 5
	Notif_MENTION           Notif_NotifType = 6
	Notif_UPDATE_THREAD     Notif_NotifType = 7
	Notif_UPDATE_COMMENT    Notif_NotifType = 8
	Notif_UPDATE_SUBCOMMENT Notif_NotifType = 9
)

var Notif_NotifType_name = map[int32]string{
	0: "UNKNOWN",
	1: "UPVOTE",
	2: "UPVOTE_COMMENT",
	3: "UPVOTE_SUBCOMMENT",
	4: "COMMENT",
	5: "SUBCOMMENT",
	6: "MENTION",
	7: "UPDATE_THREAD",
	8: "UPDATE_COMMENT",
	9: "UPDATE_SUBCOMMENT",
}

var Notif_NotifType_value = map[string]int32{
	"UNKNOWN":           0,
	"UPVOTE":            1,
	"UPVOTE_COMMENT":    2,
	"UPVOTE_SUBCOMMENT": 3,
	"COMMENT":           4,
	"SUBCOMMENT":        5,
	"MENTION":           6,
	"UPDATE_THREAD":     7,
	"UPDATE_COMMENT":    8,
	"UPDATE_SUBCOMMENT": 9,
}

func (x Notif_NotifType) String() string {
	return proto.EnumName(Notif_NotifType_name, int32(x))
}

func (Notif_NotifType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{0, 0}
}

// Notif is the format in which users get their notifications.
type Notif struct {
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// example message: "User1234 and 2 more have commented out your thread"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// example subject: "On your thread: Improving your skills at writing..."
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// example id: {section}#{content_id}#{subject}
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// url to content related to the notification
	Permalink string `protobuf:"bytes,5,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// internal details on the notification
	Details              *Notif_NotifDetails `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Notif) Reset()         { *m = Notif{} }
func (m *Notif) String() string { return proto.CompactTextString(m) }
func (*Notif) ProtoMessage()    {}
func (*Notif) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{0}
}

func (m *Notif) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notif.Unmarshal(m, b)
}
func (m *Notif) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notif.Marshal(b, m, deterministic)
}
func (m *Notif) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notif.Merge(m, src)
}
func (m *Notif) XXX_Size() int {
	return xxx_messageInfo_Notif.Size(m)
}
func (m *Notif) XXX_DiscardUnknown() {
	xxx_messageInfo_Notif.DiscardUnknown(m)
}

var xxx_messageInfo_Notif proto.InternalMessageInfo

func (m *Notif) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Notif) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notif) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Notif) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notif) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *Notif) GetDetails() *Notif_NotifDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type Notif_NotifDetails struct {
	Type                 Notif_NotifType `protobuf:"varint,1,opt,name=type,proto3,enum=dataformat.Notif_NotifType" json:"type,omitempty"`
	LastUserIdInvolved   string          `protobuf:"bytes,2,opt,name=last_user_id_involved,json=lastUserIdInvolved,proto3" json:"last_user_id_involved,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Notif_NotifDetails) Reset()         { *m = Notif_NotifDetails{} }
func (m *Notif_NotifDetails) String() string { return proto.CompactTextString(m) }
func (*Notif_NotifDetails) ProtoMessage()    {}
func (*Notif_NotifDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{0, 0}
}

func (m *Notif_NotifDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notif_NotifDetails.Unmarshal(m, b)
}
func (m *Notif_NotifDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notif_NotifDetails.Marshal(b, m, deterministic)
}
func (m *Notif_NotifDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notif_NotifDetails.Merge(m, src)
}
func (m *Notif_NotifDetails) XXX_Size() int {
	return xxx_messageInfo_Notif_NotifDetails.Size(m)
}
func (m *Notif_NotifDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_Notif_NotifDetails.DiscardUnknown(m)
}

var xxx_messageInfo_Notif_NotifDetails proto.InternalMessageInfo

func (m *Notif_NotifDetails) GetType() Notif_NotifType {
	if m != nil {
		return m.Type
	}
	return Notif_UNKNOWN
}

func (m *Notif_NotifDetails) GetLastUserIdInvolved() string {
	if m != nil {
		return m.LastUserIdInvolved
	}
	return ""
}

// Activity holds the threads created, comments and subcomments of a given
// user
type Activity struct {
	ThreadsCreated       []*context.Thread     `protobuf:"bytes,1,rep,name=threads_created,json=threadsCreated,proto3" json:"threads_created,omitempty"`
	Comments             []*context.Comment    `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Subcomments          []*context.Subcomment `protobuf:"bytes,3,rep,name=subcomments,proto3" json:"subcomments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Activity) Reset()         { *m = Activity{} }
func (m *Activity) String() string { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()    {}
func (*Activity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{1}
}

func (m *Activity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Activity.Unmarshal(m, b)
}
func (m *Activity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Activity.Marshal(b, m, deterministic)
}
func (m *Activity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Activity.Merge(m, src)
}
func (m *Activity) XXX_Size() int {
	return xxx_messageInfo_Activity.Size(m)
}
func (m *Activity) XXX_DiscardUnknown() {
	xxx_messageInfo_Activity.DiscardUnknown(m)
}

var xxx_messageInfo_Activity proto.InternalMessageInfo

func (m *Activity) GetThreadsCreated() []*context.Thread {
	if m != nil {
		return m.ThreadsCreated
	}
	return nil
}

func (m *Activity) GetComments() []*context.Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Activity) GetSubcomments() []*context.Subcomment {
	if m != nil {
		return m.Subcomments
	}
	return nil
}

// Public data of users
type BasicUserData struct {
	Alias                string   `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	PicUrl               string   `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	About                string   `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BasicUserData) Reset()         { *m = BasicUserData{} }
func (m *BasicUserData) String() string { return proto.CompactTextString(m) }
func (*BasicUserData) ProtoMessage()    {}
func (*BasicUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{2}
}

func (m *BasicUserData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BasicUserData.Unmarshal(m, b)
}
func (m *BasicUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BasicUserData.Marshal(b, m, deterministic)
}
func (m *BasicUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicUserData.Merge(m, src)
}
func (m *BasicUserData) XXX_Size() int {
	return xxx_messageInfo_BasicUserData.Size(m)
}
func (m *BasicUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicUserData.DiscardUnknown(m)
}

var xxx_messageInfo_BasicUserData proto.InternalMessageInfo

func (m *BasicUserData) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *BasicUserData) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *BasicUserData) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

func (m *BasicUserData) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

type PrivateData struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password             []byte   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateData) Reset()         { *m = PrivateData{} }
func (m *PrivateData) String() string { return proto.CompactTextString(m) }
func (*PrivateData) ProtoMessage()    {}
func (*PrivateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{3}
}

func (m *PrivateData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateData.Unmarshal(m, b)
}
func (m *PrivateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateData.Marshal(b, m, deterministic)
}
func (m *PrivateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateData.Merge(m, src)
}
func (m *PrivateData) XXX_Size() int {
	return xxx_messageInfo_PrivateData.Size(m)
}
func (m *PrivateData) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateData.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateData proto.InternalMessageInfo

func (m *PrivateData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PrivateData) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

type User struct {
	BasicUserData *BasicUserData `protobuf:"bytes,1,opt,name=basic_user_data,json=basicUserData,proto3" json:"basic_user_data,omitempty"`
	PrivateData   *PrivateData   `protobuf:"bytes,2,opt,name=private_data,json=privateData,proto3" json:"private_data,omitempty"`
	// ids of users that are following this user.
	FollowerIds []string `protobuf:"bytes,3,rep,name=follower_ids,json=followerIds,proto3" json:"follower_ids,omitempty"`
	// ids of users that this user is following.
	FollowingIds []string `protobuf:"bytes,4,rep,name=following_ids,json=followingIds,proto3" json:"following_ids,omitempty"`
	// unread notifications of this user.
	UnreadNotifs []*Notif `protobuf:"bytes,5,rep,name=unread_notifs,json=unreadNotifs,proto3" json:"unread_notifs,omitempty"`
	// read notifications of this user.
	ReadNotifs []*Notif `protobuf:"bytes,6,rep,name=read_notifs,json=readNotifs,proto3" json:"read_notifs,omitempty"`
	// ids of content this user has created recently.
	RecentActivity *Activity `protobuf:"bytes,7,opt,name=recent_activity,json=recentActivity,proto3" json:"recent_activity,omitempty"`
	// ids of unactive content this user has created.
	OldActivity *Activity `protobuf:"bytes,8,opt,name=old_activity,json=oldActivity,proto3" json:"old_activity,omitempty"`
	// ids of threads that this user has saved to read later.
	SavedThreads []*context.Thread `protobuf:"bytes,9,rep,name=saved_threads,json=savedThreads,proto3" json:"saved_threads,omitempty"`
	// the last time this user created a thread.
	LastTimeCreated      *timestamp.Timestamp `protobuf:"bytes,10,opt,name=last_time_created,json=lastTimeCreated,proto3" json:"last_time_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{4}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetBasicUserData() *BasicUserData {
	if m != nil {
		return m.BasicUserData
	}
	return nil
}

func (m *User) GetPrivateData() *PrivateData {
	if m != nil {
		return m.PrivateData
	}
	return nil
}

func (m *User) GetFollowerIds() []string {
	if m != nil {
		return m.FollowerIds
	}
	return nil
}

func (m *User) GetFollowingIds() []string {
	if m != nil {
		return m.FollowingIds
	}
	return nil
}

func (m *User) GetUnreadNotifs() []*Notif {
	if m != nil {
		return m.UnreadNotifs
	}
	return nil
}

func (m *User) GetReadNotifs() []*Notif {
	if m != nil {
		return m.ReadNotifs
	}
	return nil
}

func (m *User) GetRecentActivity() *Activity {
	if m != nil {
		return m.RecentActivity
	}
	return nil
}

func (m *User) GetOldActivity() *Activity {
	if m != nil {
		return m.OldActivity
	}
	return nil
}

func (m *User) GetSavedThreads() []*context.Thread {
	if m != nil {
		return m.SavedThreads
	}
	return nil
}

func (m *User) GetLastTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.LastTimeCreated
	}
	return nil
}

type Content struct {
	Title       string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content     string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	FtFile      string               `protobuf:"bytes,3,opt,name=ft_file,json=ftFile,proto3" json:"ft_file,omitempty"`
	PublishDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	AuthorId    string               `protobuf:"bytes,5,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	// id contains the THREAD ID
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// section_name is the name of the section
	SectionName string `protobuf:"bytes,7,opt,name=section_name,json=sectionName,proto3" json:"section_name,omitempty"`
	// section_id holds the id of the section
	SectionId  string   `protobuf:"bytes,8,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	Upvotes    uint32   `protobuf:"varint,9,opt,name=upvotes,proto3" json:"upvotes,omitempty"`
	Replies    uint32   `protobuf:"varint,10,opt,name=replies,proto3" json:"replies,omitempty"`
	VoterIds   []string `protobuf:"bytes,11,rep,name=voter_ids,json=voterIds,proto3" json:"voter_ids,omitempty"`
	ReplierIds []string `protobuf:"bytes,12,rep,name=replier_ids,json=replierIds,proto3" json:"replier_ids,omitempty"`
	// list of users who saved this content
	UsersWhoSaved []string `protobuf:"bytes,13,rep,name=users_who_saved,json=usersWhoSaved,proto3" json:"users_who_saved,omitempty"`
	// Metadata holds information about the interactions with this content.
	Metadata *metadata.Content `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// permalink is the full url to the content, including fragments
	Permalink string `protobuf:"bytes,15,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// list of users who have undone an action on this content
	UndonerIds           []string `protobuf:"bytes,16,rep,name=undoner_ids,json=undonerIds,proto3" json:"undoner_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3ef411ac4eb1018, []int{5}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Content) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Content) GetFtFile() string {
	if m != nil {
		return m.FtFile
	}
	return ""
}

func (m *Content) GetPublishDate() *timestamp.Timestamp {
	if m != nil {
		return m.PublishDate
	}
	return nil
}

func (m *Content) GetAuthorId() string {
	if m != nil {
		return m.AuthorId
	}
	return ""
}

func (m *Content) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Content) GetSectionName() string {
	if m != nil {
		return m.SectionName
	}
	return ""
}

func (m *Content) GetSectionId() string {
	if m != nil {
		return m.SectionId
	}
	return ""
}

func (m *Content) GetUpvotes() uint32 {
	if m != nil {
		return m.Upvotes
	}
	return 0
}

func (m *Content) GetReplies() uint32 {
	if m != nil {
		return m.Replies
	}
	return 0
}

func (m *Content) GetVoterIds() []string {
	if m != nil {
		return m.VoterIds
	}
	return nil
}

func (m *Content) GetReplierIds() []string {
	if m != nil {
		return m.ReplierIds
	}
	return nil
}

func (m *Content) GetUsersWhoSaved() []string {
	if m != nil {
		return m.UsersWhoSaved
	}
	return nil
}

func (m *Content) GetMetadata() *metadata.Content {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Content) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *Content) GetUndonerIds() []string {
	if m != nil {
		return m.UndonerIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("dataformat.Notif_NotifType", Notif_NotifType_name, Notif_NotifType_value)
	proto.RegisterType((*Notif)(nil), "dataformat.Notif")
	proto.RegisterType((*Notif_NotifDetails)(nil), "dataformat.Notif.NotifDetails")
	proto.RegisterType((*Activity)(nil), "dataformat.Activity")
	proto.RegisterType((*BasicUserData)(nil), "dataformat.BasicUserData")
	proto.RegisterType((*PrivateData)(nil), "dataformat.PrivateData")
	proto.RegisterType((*User)(nil), "dataformat.User")
	proto.RegisterType((*Content)(nil), "dataformat.Content")
}

func init() {
	proto.RegisterFile("data_format.proto", fileDescriptor_f3ef411ac4eb1018)
}

var fileDescriptor_f3ef411ac4eb1018 = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x5b, 0x6f, 0xdb, 0x36,
	0x18, 0x9d, 0x1d, 0xc7, 0xb6, 0x3e, 0x49, 0xbe, 0x70, 0x2d, 0xaa, 0xb9, 0xdb, 0x92, 0x7a, 0xc0,
	0x90, 0x87, 0xd6, 0xc6, 0xb2, 0x5b, 0x30, 0xa0, 0x18, 0x72, 0x2b, 0x66, 0x0c, 0x75, 0x02, 0xc5,
	0x5e, 0x81, 0xbd, 0x08, 0xb4, 0x44, 0xdb, 0xdc, 0x24, 0x51, 0x10, 0x29, 0x67, 0xf9, 0x07, 0x03,
	0xf6, 0x4b, 0xf6, 0xb4, 0xc7, 0xfd, 0xbd, 0x81, 0x17, 0x29, 0xca, 0xb6, 0xb6, 0x2f, 0x86, 0xcf,
	0xf9, 0xce, 0x21, 0x3f, 0x92, 0x87, 0x14, 0x0c, 0x23, 0x2c, 0x70, 0xb0, 0x66, 0x79, 0x82, 0xc5,
	0x24, 0xcb, 0x99, 0x60, 0x08, 0x24, 0xa5, 0x99, 0xd1, 0xc1, 0x86, 0xb1, 0x4d, 0x4c, 0xa6, 0xaa,
	0xb2, 0x2a, 0xd6, 0x53, 0x41, 0x13, 0xc2, 0x05, 0x4e, 0x32, 0x2d, 0x1e, 0xb9, 0x21, 0x4b, 0x05,
	0xf9, 0xcd, 0x78, 0x47, 0xbd, 0x84, 0x08, 0x2c, 0xfd, 0x1a, 0x8f, 0xff, 0x68, 0xc1, 0xfe, 0x9c,
	0x09, 0xba, 0x46, 0x27, 0x60, 0x55, 0x5e, 0xaf, 0x71, 0xd8, 0x38, 0xb2, 0x8f, 0x47, 0x13, 0x3d,
	0xfa, 0xa4, 0x1c, 0x7d, 0xb2, 0x28, 0x15, 0xfe, 0xbd, 0x18, 0x79, 0xd0, 0x49, 0x08, 0xe7, 0x78,
	0x43, 0xbc, 0xe6, 0x61, 0xe3, 0xc8, 0xf2, 0x4b, 0x28, 0x2b, 0xbc, 0x58, 0xfd, 0x42, 0x42, 0xe1,
	0xed, 0xe9, 0x8a, 0x81, 0xa8, 0x07, 0x4d, 0x1a, 0x79, 0x2d, 0x45, 0x36, 0x69, 0x84, 0x3e, 0x06,
	0x2b, 0x23, 0x79, 0x82, 0x63, 0x9a, 0xfe, 0xea, 0xed, 0x2b, 0xfa, 0x9e, 0x40, 0x27, 0xd0, 0x89,
	0x88, 0xc0, 0x34, 0xe6, 0x5e, 0x5b, 0x75, 0xf6, 0xe9, 0xe4, 0x7e, 0x0f, 0x26, 0xaa, 0x7f, 0xfd,
	0x7b, 0xa1, 0x55, 0x7e, 0x29, 0x1f, 0xe5, 0xe0, 0xd4, 0x0b, 0x68, 0x0a, 0x2d, 0x71, 0x97, 0x11,
	0xb5, 0xc0, 0xde, 0xf1, 0xd3, 0xb7, 0x0c, 0xb3, 0xb8, 0xcb, 0x88, 0xaf, 0x84, 0xe8, 0x0b, 0x78,
	0x1c, 0x63, 0x2e, 0x82, 0x82, 0x93, 0x3c, 0xa0, 0x51, 0x40, 0xd3, 0x1d, 0x8b, 0x77, 0x24, 0x32,
	0x4b, 0x45, 0xb2, 0xb8, 0xe4, 0x24, 0x9f, 0x45, 0x33, 0x53, 0x19, 0xff, 0xdd, 0x00, 0xab, 0x1a,
	0x06, 0xd9, 0xd0, 0x59, 0xce, 0x7f, 0x9c, 0x5f, 0xbd, 0x99, 0x0f, 0x3e, 0x40, 0x00, 0xed, 0xe5,
	0xf5, 0x4f, 0x57, 0x8b, 0xcb, 0x41, 0x03, 0x21, 0xe8, 0xe9, 0xff, 0xc1, 0xf9, 0xd5, 0xeb, 0xd7,
	0x97, 0xf3, 0xc5, 0xa0, 0x89, 0x1e, 0xc3, 0xd0, 0x70, 0x37, 0xcb, 0xb3, 0x92, 0xde, 0x93, 0x63,
	0x94, 0xa0, 0x85, 0x7a, 0x00, 0xb5, 0xe2, 0xbe, 0x2c, 0xca, 0x7f, 0xb3, 0xab, 0xf9, 0xa0, 0x8d,
	0x86, 0xe0, 0x2e, 0xaf, 0x2f, 0x4e, 0x17, 0x97, 0xc1, 0xe2, 0x07, 0xff, 0xf2, 0xf4, 0x62, 0xd0,
	0xd1, 0xf3, 0x28, 0xaa, 0xf4, 0x74, 0xf5, 0x3c, 0x8a, 0xab, 0x0d, 0x65, 0x8d, 0xff, 0x6c, 0x40,
	0xf7, 0x34, 0x14, 0x74, 0x47, 0xc5, 0x1d, 0x3a, 0x81, 0xbe, 0xd8, 0xe6, 0x04, 0x47, 0x3c, 0x08,
	0x73, 0x82, 0x05, 0x89, 0xbc, 0xc6, 0xe1, 0xde, 0x91, 0x7d, 0xdc, 0x9f, 0x94, 0x99, 0x5a, 0xa8,
	0xba, 0xdf, 0x33, 0xba, 0x73, 0x2d, 0x43, 0xcf, 0xa1, 0x1b, 0xb2, 0x24, 0x21, 0xa9, 0xe0, 0x5e,
	0x53, 0x59, 0x06, 0x95, 0xe5, 0x5c, 0x17, 0xfc, 0x4a, 0x81, 0xbe, 0x06, 0x9b, 0x17, 0xab, 0xca,
	0xb0, 0xa7, 0x0c, 0x1f, 0x56, 0x86, 0x9b, 0xaa, 0xe6, 0xd7, 0x75, 0xe3, 0x0c, 0xdc, 0x33, 0xcc,
	0x69, 0x28, 0x37, 0xff, 0x02, 0x0b, 0x8c, 0x1e, 0xc1, 0x3e, 0x8e, 0x29, 0xe6, 0xea, 0x6c, 0x2d,
	0x5f, 0x03, 0x34, 0x82, 0xae, 0x3c, 0xba, 0x14, 0x27, 0x65, 0x3a, 0x2b, 0x8c, 0x9e, 0x40, 0x27,
	0xa3, 0x61, 0x50, 0xe4, 0xb1, 0x89, 0x67, 0x3b, 0xa3, 0xe1, 0x32, 0x8f, 0xd5, 0x50, 0x2b, 0x56,
	0x08, 0x13, 0x50, 0x0d, 0xc6, 0xdf, 0x83, 0x7d, 0x9d, 0xd3, 0x1d, 0x16, 0xa4, 0x9c, 0x8f, 0x24,
	0x98, 0xc6, 0xe5, 0x7c, 0x0a, 0xc8, 0xf9, 0x32, 0xcc, 0xf9, 0x2d, 0xcb, 0x75, 0x44, 0x1c, 0xbf,
	0xc2, 0xe3, 0xbf, 0x5a, 0xd0, 0x92, 0xed, 0xa2, 0x53, 0xe8, 0xaf, 0x64, 0xef, 0x3a, 0x55, 0x32,
	0x83, 0xe6, 0xc6, 0x7d, 0x54, 0x0f, 0xe4, 0x83, 0xe5, 0xf9, 0xee, 0xea, 0xc1, 0x6a, 0xbf, 0x03,
	0x27, 0xd3, 0xcd, 0x68, 0x7f, 0x53, 0xf9, 0x9f, 0xd4, 0xfd, 0xb5, 0x66, 0x7d, 0x3b, 0xab, 0x75,
	0xfe, 0x0c, 0x9c, 0x35, 0x8b, 0x63, 0x76, 0xab, 0x22, 0xad, 0xb7, 0xdc, 0xf2, 0xed, 0x92, 0x9b,
	0x45, 0x1c, 0x7d, 0x06, 0xae, 0x86, 0x34, 0xdd, 0x28, 0x4d, 0x4b, 0x69, 0x9c, 0x8a, 0x94, 0xa2,
	0x6f, 0xc0, 0x2d, 0x52, 0x79, 0xf2, 0x41, 0x2a, 0xe3, 0xce, 0xbd, 0x7d, 0x75, 0x76, 0xc3, 0xff,
	0xdc, 0x2a, 0xdf, 0xd1, 0x3a, 0x05, 0x38, 0x3a, 0x06, 0xbb, 0xee, 0x6a, 0xbf, 0xcd, 0x05, 0x35,
	0xcf, 0x4b, 0xe8, 0xe7, 0x24, 0x24, 0xa9, 0x08, 0xb0, 0x09, 0xa8, 0xd7, 0x51, 0x4b, 0x7e, 0x54,
	0xf7, 0x95, 0xe1, 0xf5, 0x7b, 0x5a, 0x5c, 0x85, 0xf9, 0x5b, 0x70, 0x58, 0x1c, 0xdd, 0x7b, 0xbb,
	0xef, 0xf0, 0xda, 0x2c, 0x8e, 0x2a, 0xe3, 0x57, 0xe0, 0x72, 0xbc, 0x23, 0x51, 0x60, 0x32, 0xee,
	0x59, 0xff, 0x7f, 0x07, 0x1c, 0xa5, 0xd2, 0x80, 0xa3, 0x57, 0x30, 0x54, 0xaf, 0x86, 0x7c, 0x24,
	0xab, 0xdb, 0x03, 0xef, 0x7d, 0x54, 0xfb, 0xd2, 0x24, 0xa1, 0xb9, 0x49, 0xe3, 0xdf, 0x5b, 0xd0,
	0x39, 0x97, 0x13, 0xa5, 0x42, 0xe6, 0x4d, 0x50, 0x11, 0x93, 0x32, 0x6f, 0x0a, 0xc8, 0x27, 0x36,
	0xd4, 0x82, 0xf2, 0xf1, 0x35, 0x50, 0xa6, 0x7b, 0x2d, 0x82, 0x35, 0x8d, 0x49, 0x99, 0xee, 0xb5,
	0x78, 0x45, 0x63, 0x82, 0x5e, 0x82, 0x93, 0x15, 0xab, 0x98, 0xf2, 0xad, 0x8c, 0x0e, 0x51, 0x21,
	0x7f, 0x77, 0x5f, 0xb6, 0xd1, 0x5f, 0x60, 0x41, 0xd0, 0x53, 0xb0, 0x70, 0x21, 0xb6, 0x4c, 0x66,
	0xc7, 0x3c, 0xd5, 0x5d, 0x4d, 0xcc, 0x22, 0xf3, 0xae, 0xb7, 0xab, 0x77, 0xfd, 0x19, 0x38, 0x9c,
	0x84, 0x82, 0xb2, 0x34, 0x50, 0x57, 0xb0, 0xa3, 0x2a, 0xb6, 0xe1, 0xe6, 0xf2, 0x16, 0x7e, 0x02,
	0x50, 0x4a, 0x68, 0xa4, 0x0e, 0xc6, 0xf2, 0x2d, 0xc3, 0xcc, 0x22, 0xb9, 0xc0, 0x22, 0xdb, 0x31,
	0x41, 0xe4, 0xd6, 0x37, 0x8e, 0x5c, 0xbf, 0x84, 0xb2, 0x92, 0x93, 0x2c, 0xa6, 0x84, 0xab, 0xad,
	0x75, 0xfd, 0x12, 0xca, 0x16, 0xa5, 0x44, 0xa7, 0xdb, 0x56, 0xc9, 0xed, 0x2a, 0x42, 0xa6, 0xf6,
	0x40, 0xa6, 0x4f, 0xea, 0x74, 0xd9, 0x51, 0x65, 0x30, 0x94, 0x14, 0x7c, 0x0e, 0x7d, 0x79, 0x2f,
	0x79, 0x70, 0xbb, 0x65, 0x81, 0x3a, 0x56, 0xcf, 0x55, 0x22, 0x57, 0xd1, 0x6f, 0xb6, 0xec, 0x46,
	0x92, 0xe8, 0x05, 0x74, 0xcb, 0xaf, 0xa9, 0xd7, 0x53, 0x7b, 0x38, 0x9c, 0x54, 0x9f, 0x57, 0x73,
	0x6a, 0x7e, 0x25, 0x79, 0xf8, 0x89, 0xeb, 0xff, 0xfb, 0x13, 0x77, 0x00, 0x76, 0x91, 0x46, 0x2c,
	0x35, 0x5d, 0x0d, 0x74, 0x57, 0x86, 0x9a, 0x45, 0xfc, 0x6c, 0xf2, 0xf3, 0xf3, 0x0d, 0x15, 0xdb,
	0x62, 0x35, 0x09, 0x59, 0x32, 0x8d, 0x0b, 0xca, 0x37, 0xc5, 0x8e, 0x4c, 0xc3, 0x2d, 0xc9, 0x99,
	0x3a, 0xb2, 0x17, 0x1b, 0x36, 0xbd, 0x8f, 0xf3, 0xaa, 0xad, 0xc8, 0x2f, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x32, 0x38, 0x27, 0x99, 0x41, 0x08, 0x00, 0x00,
}
