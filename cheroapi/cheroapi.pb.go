// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cheroapi.proto

// Package cheropatillapb defines the interface to send and receive messages to
// and from the server.

package cheroapi

import (
	context1 "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "github.com/luisguve/cheroproto-go/context"
	dataformat "github.com/luisguve/cheroproto-go/dataformat"
	metadata "github.com/luisguve/cheroproto-go/metadata"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Content struct {
	Title                string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content              string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	FtFile               string               `protobuf:"bytes,3,opt,name=ft_file,json=ftFile,proto3" json:"ft_file,omitempty"`
	PublishDate          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{0}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Content) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Content) GetFtFile() string {
	if m != nil {
		return m.FtFile
	}
	return ""
}

func (m *Content) GetPublishDate() *timestamp.Timestamp {
	if m != nil {
		return m.PublishDate
	}
	return nil
}

type ContentAuthor struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Alias                string   `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentAuthor) Reset()         { *m = ContentAuthor{} }
func (m *ContentAuthor) String() string { return proto.CompactTextString(m) }
func (*ContentAuthor) ProtoMessage()    {}
func (*ContentAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{1}
}

func (m *ContentAuthor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentAuthor.Unmarshal(m, b)
}
func (m *ContentAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentAuthor.Marshal(b, m, deterministic)
}
func (m *ContentAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentAuthor.Merge(m, src)
}
func (m *ContentAuthor) XXX_Size() int {
	return xxx_messageInfo_ContentAuthor.Size(m)
}
func (m *ContentAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_ContentAuthor proto.InternalMessageInfo

func (m *ContentAuthor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContentAuthor) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ContentAuthor) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type ContentMetadata struct {
	// id contains the THREAD ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// section is the name of the section
	Section string `protobuf:"bytes,2,opt,name=section,proto3" json:"section,omitempty"`
	// permalink is the full url to the content, including any fragment
	Permalink  string   `protobuf:"bytes,3,opt,name=permalink,proto3" json:"permalink,omitempty"`
	Upvotes    uint32   `protobuf:"varint,4,opt,name=upvotes,proto3" json:"upvotes,omitempty"`
	Replies    uint32   `protobuf:"varint,5,opt,name=replies,proto3" json:"replies,omitempty"`
	VoterIds   []string `protobuf:"bytes,6,rep,name=voter_ids,json=voterIds,proto3" json:"voter_ids,omitempty"`
	ReplierIds []string `protobuf:"bytes,7,rep,name=replier_ids,json=replierIds,proto3" json:"replier_ids,omitempty"`
	// list of users who saved this content
	UsersWhoSaved        []string `protobuf:"bytes,8,rep,name=users_who_saved,json=usersWhoSaved,proto3" json:"users_who_saved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentMetadata) Reset()         { *m = ContentMetadata{} }
func (m *ContentMetadata) String() string { return proto.CompactTextString(m) }
func (*ContentMetadata) ProtoMessage()    {}
func (*ContentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{2}
}

func (m *ContentMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentMetadata.Unmarshal(m, b)
}
func (m *ContentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentMetadata.Marshal(b, m, deterministic)
}
func (m *ContentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentMetadata.Merge(m, src)
}
func (m *ContentMetadata) XXX_Size() int {
	return xxx_messageInfo_ContentMetadata.Size(m)
}
func (m *ContentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ContentMetadata proto.InternalMessageInfo

func (m *ContentMetadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContentMetadata) GetSection() string {
	if m != nil {
		return m.Section
	}
	return ""
}

func (m *ContentMetadata) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *ContentMetadata) GetUpvotes() uint32 {
	if m != nil {
		return m.Upvotes
	}
	return 0
}

func (m *ContentMetadata) GetReplies() uint32 {
	if m != nil {
		return m.Replies
	}
	return 0
}

func (m *ContentMetadata) GetVoterIds() []string {
	if m != nil {
		return m.VoterIds
	}
	return nil
}

func (m *ContentMetadata) GetReplierIds() []string {
	if m != nil {
		return m.ReplierIds
	}
	return nil
}

func (m *ContentMetadata) GetUsersWhoSaved() []string {
	if m != nil {
		return m.UsersWhoSaved
	}
	return nil
}

type ContentData struct {
	Author               *ContentAuthor   `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Content              *Content         `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Metadata             *ContentMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ContentData) Reset()         { *m = ContentData{} }
func (m *ContentData) String() string { return proto.CompactTextString(m) }
func (*ContentData) ProtoMessage()    {}
func (*ContentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{3}
}

func (m *ContentData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentData.Unmarshal(m, b)
}
func (m *ContentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentData.Marshal(b, m, deterministic)
}
func (m *ContentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentData.Merge(m, src)
}
func (m *ContentData) XXX_Size() int {
	return xxx_messageInfo_ContentData.Size(m)
}
func (m *ContentData) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentData.DiscardUnknown(m)
}

var xxx_messageInfo_ContentData proto.InternalMessageInfo

func (m *ContentData) GetAuthor() *ContentAuthor {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ContentData) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ContentData) GetMetadata() *ContentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// NotifyUser maps notifications to users.
type NotifyUser struct {
	UserId               string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Notification         *dataformat.Notif `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NotifyUser) Reset()         { *m = NotifyUser{} }
func (m *NotifyUser) String() string { return proto.CompactTextString(m) }
func (*NotifyUser) ProtoMessage()    {}
func (*NotifyUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{4}
}

func (m *NotifyUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyUser.Unmarshal(m, b)
}
func (m *NotifyUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyUser.Marshal(b, m, deterministic)
}
func (m *NotifyUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyUser.Merge(m, src)
}
func (m *NotifyUser) XXX_Size() int {
	return xxx_messageInfo_NotifyUser.Size(m)
}
func (m *NotifyUser) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyUser.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyUser proto.InternalMessageInfo

func (m *NotifyUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *NotifyUser) GetNotification() *dataformat.Notif {
	if m != nil {
		return m.Notification
	}
	return nil
}

// ContentPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling content of a specific
// type: either threads in a section, or comments in a thread.
type ContentPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is an array of content ids that must not be returned back, since it's
	// content the user has already seen.
	DiscardIds []string `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty"`
	// content_context represents the place in which the content must be retrieved from.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*ContentPattern_SectionCtx
	//	*ContentPattern_ThreadCtx
	ContentContext       isContentPattern_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ContentPattern) Reset()         { *m = ContentPattern{} }
func (m *ContentPattern) String() string { return proto.CompactTextString(m) }
func (*ContentPattern) ProtoMessage()    {}
func (*ContentPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{5}
}

func (m *ContentPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentPattern.Unmarshal(m, b)
}
func (m *ContentPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentPattern.Marshal(b, m, deterministic)
}
func (m *ContentPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentPattern.Merge(m, src)
}
func (m *ContentPattern) XXX_Size() int {
	return xxx_messageInfo_ContentPattern.Size(m)
}
func (m *ContentPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentPattern.DiscardUnknown(m)
}

var xxx_messageInfo_ContentPattern proto.InternalMessageInfo

func (m *ContentPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *ContentPattern) GetDiscardIds() []string {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

type isContentPattern_ContentContext interface {
	isContentPattern_ContentContext()
}

type ContentPattern_SectionCtx struct {
	SectionCtx *context.Section `protobuf:"bytes,3,opt,name=section_ctx,json=sectionCtx,proto3,oneof"`
}

type ContentPattern_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,4,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

func (*ContentPattern_SectionCtx) isContentPattern_ContentContext() {}

func (*ContentPattern_ThreadCtx) isContentPattern_ContentContext() {}

func (m *ContentPattern) GetContentContext() isContentPattern_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *ContentPattern) GetSectionCtx() *context.Section {
	if x, ok := m.GetContentContext().(*ContentPattern_SectionCtx); ok {
		return x.SectionCtx
	}
	return nil
}

func (m *ContentPattern) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*ContentPattern_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContentPattern) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContentPattern_SectionCtx)(nil),
		(*ContentPattern_ThreadCtx)(nil),
	}
}

// GeneralPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling content from every section.
type GeneralPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is a map of section names mapped to content ids that must not be
	// returned back, since it's content the user has already seen.
	DiscardIds           map[string]*IdList `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GeneralPattern) Reset()         { *m = GeneralPattern{} }
func (m *GeneralPattern) String() string { return proto.CompactTextString(m) }
func (*GeneralPattern) ProtoMessage()    {}
func (*GeneralPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{6}
}

func (m *GeneralPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeneralPattern.Unmarshal(m, b)
}
func (m *GeneralPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeneralPattern.Marshal(b, m, deterministic)
}
func (m *GeneralPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralPattern.Merge(m, src)
}
func (m *GeneralPattern) XXX_Size() int {
	return xxx_messageInfo_GeneralPattern.Size(m)
}
func (m *GeneralPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralPattern.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralPattern proto.InternalMessageInfo

func (m *GeneralPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *GeneralPattern) GetDiscardIds() map[string]*IdList {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

// SavedPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling content in the context
// of a user viewing his saved threads.
type SavedPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is a map of section names mapped to content ids that must not be
	// returned back, since it's content the user has already seen.
	DiscardIds map[string]*IdList `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the user
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SavedPattern) Reset()         { *m = SavedPattern{} }
func (m *SavedPattern) String() string { return proto.CompactTextString(m) }
func (*SavedPattern) ProtoMessage()    {}
func (*SavedPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{7}
}

func (m *SavedPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SavedPattern.Unmarshal(m, b)
}
func (m *SavedPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SavedPattern.Marshal(b, m, deterministic)
}
func (m *SavedPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedPattern.Merge(m, src)
}
func (m *SavedPattern) XXX_Size() int {
	return xxx_messageInfo_SavedPattern.Size(m)
}
func (m *SavedPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedPattern.DiscardUnknown(m)
}

var xxx_messageInfo_SavedPattern proto.InternalMessageInfo

func (m *SavedPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *SavedPattern) GetDiscardIds() map[string]*IdList {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

func (m *SavedPattern) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// IdList holds a list of ids of content
type IdList struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdList) Reset()         { *m = IdList{} }
func (m *IdList) String() string { return proto.CompactTextString(m) }
func (*IdList) ProtoMessage()    {}
func (*IdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{8}
}

func (m *IdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdList.Unmarshal(m, b)
}
func (m *IdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdList.Marshal(b, m, deterministic)
}
func (m *IdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdList.Merge(m, src)
}
func (m *IdList) XXX_Size() int {
	return xxx_messageInfo_IdList.Size(m)
}
func (m *IdList) XXX_DiscardUnknown() {
	xxx_messageInfo_IdList.DiscardUnknown(m)
}

var xxx_messageInfo_IdList proto.InternalMessageInfo

func (m *IdList) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

// ActivityPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling activity from a specific
// user or a list of users.
type ActivityPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is a map of user_ids to activity from the user referred to by
	// the key that must not be returned back, since it's content the user has
	// already seen.
	DiscardIds map[string]*dataformat.Activity `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// context is either users following or the user itself.
	//
	// Types that are valid to be assigned to Context:
	//	*ActivityPattern_Users
	//	*ActivityPattern_UserId
	Context              isActivityPattern_Context `protobuf_oneof:"context"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ActivityPattern) Reset()         { *m = ActivityPattern{} }
func (m *ActivityPattern) String() string { return proto.CompactTextString(m) }
func (*ActivityPattern) ProtoMessage()    {}
func (*ActivityPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{9}
}

func (m *ActivityPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivityPattern.Unmarshal(m, b)
}
func (m *ActivityPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivityPattern.Marshal(b, m, deterministic)
}
func (m *ActivityPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityPattern.Merge(m, src)
}
func (m *ActivityPattern) XXX_Size() int {
	return xxx_messageInfo_ActivityPattern.Size(m)
}
func (m *ActivityPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityPattern.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityPattern proto.InternalMessageInfo

func (m *ActivityPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *ActivityPattern) GetDiscardIds() map[string]*dataformat.Activity {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

type isActivityPattern_Context interface {
	isActivityPattern_Context()
}

type ActivityPattern_Users struct {
	Users *UserList `protobuf:"bytes,3,opt,name=users,proto3,oneof"`
}

type ActivityPattern_UserId struct {
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*ActivityPattern_Users) isActivityPattern_Context() {}

func (*ActivityPattern_UserId) isActivityPattern_Context() {}

func (m *ActivityPattern) GetContext() isActivityPattern_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ActivityPattern) GetUsers() *UserList {
	if x, ok := m.GetContext().(*ActivityPattern_Users); ok {
		return x.Users
	}
	return nil
}

func (m *ActivityPattern) GetUserId() string {
	if x, ok := m.GetContext().(*ActivityPattern_UserId); ok {
		return x.UserId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActivityPattern) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActivityPattern_Users)(nil),
		(*ActivityPattern_UserId)(nil),
	}
}

// UserList holds a list of user ids
type UserList struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{10}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

// ContentRule holds a piece of content, its current status and its type.
type ContentRule struct {
	Data *ContentData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Types that are valid to be assigned to ContentContext:
	//	*ContentRule_ThreadCtx
	//	*ContentRule_CommentCtx
	//	*ContentRule_SubcommentCtx
	ContentContext isContentRule_ContentContext `protobuf_oneof:"content_context"`
	// Status holds either NEW, REL or TOP
	Status               string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentRule) Reset()         { *m = ContentRule{} }
func (m *ContentRule) String() string { return proto.CompactTextString(m) }
func (*ContentRule) ProtoMessage()    {}
func (*ContentRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{11}
}

func (m *ContentRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentRule.Unmarshal(m, b)
}
func (m *ContentRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentRule.Marshal(b, m, deterministic)
}
func (m *ContentRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentRule.Merge(m, src)
}
func (m *ContentRule) XXX_Size() int {
	return xxx_messageInfo_ContentRule.Size(m)
}
func (m *ContentRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentRule.DiscardUnknown(m)
}

var xxx_messageInfo_ContentRule proto.InternalMessageInfo

func (m *ContentRule) GetData() *ContentData {
	if m != nil {
		return m.Data
	}
	return nil
}

type isContentRule_ContentContext interface {
	isContentRule_ContentContext()
}

type ContentRule_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type ContentRule_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type ContentRule_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*ContentRule_ThreadCtx) isContentRule_ContentContext() {}

func (*ContentRule_CommentCtx) isContentRule_ContentContext() {}

func (*ContentRule_SubcommentCtx) isContentRule_ContentContext() {}

func (m *ContentRule) GetContentContext() isContentRule_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *ContentRule) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*ContentRule_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *ContentRule) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*ContentRule_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *ContentRule) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*ContentRule_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

func (m *ContentRule) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContentRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContentRule_ThreadCtx)(nil),
		(*ContentRule_CommentCtx)(nil),
		(*ContentRule_SubcommentCtx)(nil),
	}
}

// UpvoteRequest holds information about the upvote event.
type UpvoteRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The upvote event occurs either in a thread, in a comment or in a subcomment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*UpvoteRequest_ThreadCtx
	//	*UpvoteRequest_CommentCtx
	//	*UpvoteRequest_SubcommentCtx
	ContentContext       isUpvoteRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UpvoteRequest) Reset()         { *m = UpvoteRequest{} }
func (m *UpvoteRequest) String() string { return proto.CompactTextString(m) }
func (*UpvoteRequest) ProtoMessage()    {}
func (*UpvoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{12}
}

func (m *UpvoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpvoteRequest.Unmarshal(m, b)
}
func (m *UpvoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpvoteRequest.Marshal(b, m, deterministic)
}
func (m *UpvoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpvoteRequest.Merge(m, src)
}
func (m *UpvoteRequest) XXX_Size() int {
	return xxx_messageInfo_UpvoteRequest.Size(m)
}
func (m *UpvoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpvoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpvoteRequest proto.InternalMessageInfo

func (m *UpvoteRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type isUpvoteRequest_ContentContext interface {
	isUpvoteRequest_ContentContext()
}

type UpvoteRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type UpvoteRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type UpvoteRequest_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*UpvoteRequest_ThreadCtx) isUpvoteRequest_ContentContext() {}

func (*UpvoteRequest_CommentCtx) isUpvoteRequest_ContentContext() {}

func (*UpvoteRequest_SubcommentCtx) isUpvoteRequest_ContentContext() {}

func (m *UpvoteRequest) GetContentContext() isUpvoteRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *UpvoteRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*UpvoteRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *UpvoteRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*UpvoteRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *UpvoteRequest) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*UpvoteRequest_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpvoteRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpvoteRequest_ThreadCtx)(nil),
		(*UpvoteRequest_CommentCtx)(nil),
		(*UpvoteRequest_SubcommentCtx)(nil),
	}
}

// UndoUpvoteRequest holds information about the upvote undoing event.
type UndoUpvoteRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The upvote event occurs either in a thread, in a comment or in a subcomment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*UndoUpvoteRequest_ThreadCtx
	//	*UndoUpvoteRequest_CommentCtx
	//	*UndoUpvoteRequest_SubcommentCtx
	ContentContext       isUndoUpvoteRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *UndoUpvoteRequest) Reset()         { *m = UndoUpvoteRequest{} }
func (m *UndoUpvoteRequest) String() string { return proto.CompactTextString(m) }
func (*UndoUpvoteRequest) ProtoMessage()    {}
func (*UndoUpvoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{13}
}

func (m *UndoUpvoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndoUpvoteRequest.Unmarshal(m, b)
}
func (m *UndoUpvoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndoUpvoteRequest.Marshal(b, m, deterministic)
}
func (m *UndoUpvoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoUpvoteRequest.Merge(m, src)
}
func (m *UndoUpvoteRequest) XXX_Size() int {
	return xxx_messageInfo_UndoUpvoteRequest.Size(m)
}
func (m *UndoUpvoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoUpvoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UndoUpvoteRequest proto.InternalMessageInfo

func (m *UndoUpvoteRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type isUndoUpvoteRequest_ContentContext interface {
	isUndoUpvoteRequest_ContentContext()
}

type UndoUpvoteRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type UndoUpvoteRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type UndoUpvoteRequest_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*UndoUpvoteRequest_ThreadCtx) isUndoUpvoteRequest_ContentContext() {}

func (*UndoUpvoteRequest_CommentCtx) isUndoUpvoteRequest_ContentContext() {}

func (*UndoUpvoteRequest_SubcommentCtx) isUndoUpvoteRequest_ContentContext() {}

func (m *UndoUpvoteRequest) GetContentContext() isUndoUpvoteRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *UndoUpvoteRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*UndoUpvoteRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *UndoUpvoteRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*UndoUpvoteRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *UndoUpvoteRequest) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*UndoUpvoteRequest_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UndoUpvoteRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UndoUpvoteRequest_ThreadCtx)(nil),
		(*UndoUpvoteRequest_CommentCtx)(nil),
		(*UndoUpvoteRequest_SubcommentCtx)(nil),
	}
}

type UndoUpvoteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UndoUpvoteResponse) Reset()         { *m = UndoUpvoteResponse{} }
func (m *UndoUpvoteResponse) String() string { return proto.CompactTextString(m) }
func (*UndoUpvoteResponse) ProtoMessage()    {}
func (*UndoUpvoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{14}
}

func (m *UndoUpvoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndoUpvoteResponse.Unmarshal(m, b)
}
func (m *UndoUpvoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndoUpvoteResponse.Marshal(b, m, deterministic)
}
func (m *UndoUpvoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoUpvoteResponse.Merge(m, src)
}
func (m *UndoUpvoteResponse) XXX_Size() int {
	return xxx_messageInfo_UndoUpvoteResponse.Size(m)
}
func (m *UndoUpvoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoUpvoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndoUpvoteResponse proto.InternalMessageInfo

// CommentRequest holds information about the comment event.
type CommentRequest struct {
	// A comment has the same basic structure as regular content but doesn't have a title.
	Content     string               `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	FtFile      string               `protobuf:"bytes,2,opt,name=ft_file,json=ftFile,proto3" json:"ft_file,omitempty"`
	UserId      string               `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PublishDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	// The comment event occurs either in a thread or in a comment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*CommentRequest_ThreadCtx
	//	*CommentRequest_CommentCtx
	ContentContext       isCommentRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CommentRequest) Reset()         { *m = CommentRequest{} }
func (m *CommentRequest) String() string { return proto.CompactTextString(m) }
func (*CommentRequest) ProtoMessage()    {}
func (*CommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{15}
}

func (m *CommentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentRequest.Unmarshal(m, b)
}
func (m *CommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentRequest.Marshal(b, m, deterministic)
}
func (m *CommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentRequest.Merge(m, src)
}
func (m *CommentRequest) XXX_Size() int {
	return xxx_messageInfo_CommentRequest.Size(m)
}
func (m *CommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentRequest proto.InternalMessageInfo

func (m *CommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CommentRequest) GetFtFile() string {
	if m != nil {
		return m.FtFile
	}
	return ""
}

func (m *CommentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CommentRequest) GetPublishDate() *timestamp.Timestamp {
	if m != nil {
		return m.PublishDate
	}
	return nil
}

type isCommentRequest_ContentContext interface {
	isCommentRequest_ContentContext()
}

type CommentRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,5,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type CommentRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,6,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

func (*CommentRequest_ThreadCtx) isCommentRequest_ContentContext() {}

func (*CommentRequest_CommentCtx) isCommentRequest_ContentContext() {}

func (m *CommentRequest) GetContentContext() isCommentRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *CommentRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*CommentRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *CommentRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*CommentRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommentRequest_ThreadCtx)(nil),
		(*CommentRequest_CommentCtx)(nil),
	}
}

// DeleteContentRequest holds information about the delete content event.
type DeleteContentRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The delete content event occurs either in a thread, in a comment or in a subcomment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*DeleteContentRequest_ThreadCtx
	//	*DeleteContentRequest_CommentCtx
	//	*DeleteContentRequest_SubcommentCtx
	ContentContext       isDeleteContentRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *DeleteContentRequest) Reset()         { *m = DeleteContentRequest{} }
func (m *DeleteContentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteContentRequest) ProtoMessage()    {}
func (*DeleteContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{16}
}

func (m *DeleteContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteContentRequest.Unmarshal(m, b)
}
func (m *DeleteContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteContentRequest.Marshal(b, m, deterministic)
}
func (m *DeleteContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteContentRequest.Merge(m, src)
}
func (m *DeleteContentRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteContentRequest.Size(m)
}
func (m *DeleteContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteContentRequest proto.InternalMessageInfo

func (m *DeleteContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type isDeleteContentRequest_ContentContext interface {
	isDeleteContentRequest_ContentContext()
}

type DeleteContentRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type DeleteContentRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type DeleteContentRequest_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*DeleteContentRequest_ThreadCtx) isDeleteContentRequest_ContentContext() {}

func (*DeleteContentRequest_CommentCtx) isDeleteContentRequest_ContentContext() {}

func (*DeleteContentRequest_SubcommentCtx) isDeleteContentRequest_ContentContext() {}

func (m *DeleteContentRequest) GetContentContext() isDeleteContentRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *DeleteContentRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*DeleteContentRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *DeleteContentRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*DeleteContentRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *DeleteContentRequest) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*DeleteContentRequest_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeleteContentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeleteContentRequest_ThreadCtx)(nil),
		(*DeleteContentRequest_CommentCtx)(nil),
		(*DeleteContentRequest_SubcommentCtx)(nil),
	}
}

type DeleteContentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteContentResponse) Reset()         { *m = DeleteContentResponse{} }
func (m *DeleteContentResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteContentResponse) ProtoMessage()    {}
func (*DeleteContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{17}
}

func (m *DeleteContentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteContentResponse.Unmarshal(m, b)
}
func (m *DeleteContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteContentResponse.Marshal(b, m, deterministic)
}
func (m *DeleteContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteContentResponse.Merge(m, src)
}
func (m *DeleteContentResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteContentResponse.Size(m)
}
func (m *DeleteContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteContentResponse proto.InternalMessageInfo

// CreateThreadRequest holds the content of the thread, the section at which the content
// is being created and the id of the author.
type CreateThreadRequest struct {
	Content              *Content         `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	SectionCtx           *context.Section `protobuf:"bytes,2,opt,name=section_ctx,json=sectionCtx,proto3" json:"section_ctx,omitempty"`
	UserId               string           `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateThreadRequest) Reset()         { *m = CreateThreadRequest{} }
func (m *CreateThreadRequest) String() string { return proto.CompactTextString(m) }
func (*CreateThreadRequest) ProtoMessage()    {}
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{18}
}

func (m *CreateThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateThreadRequest.Unmarshal(m, b)
}
func (m *CreateThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateThreadRequest.Marshal(b, m, deterministic)
}
func (m *CreateThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThreadRequest.Merge(m, src)
}
func (m *CreateThreadRequest) XXX_Size() int {
	return xxx_messageInfo_CreateThreadRequest.Size(m)
}
func (m *CreateThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThreadRequest proto.InternalMessageInfo

func (m *CreateThreadRequest) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *CreateThreadRequest) GetSectionCtx() *context.Section {
	if m != nil {
		return m.SectionCtx
	}
	return nil
}

func (m *CreateThreadRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// CreateThreadResponse holds the relative URL of the thread just created
type CreateThreadResponse struct {
	Permalink            string   `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateThreadResponse) Reset()         { *m = CreateThreadResponse{} }
func (m *CreateThreadResponse) String() string { return proto.CompactTextString(m) }
func (*CreateThreadResponse) ProtoMessage()    {}
func (*CreateThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{19}
}

func (m *CreateThreadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateThreadResponse.Unmarshal(m, b)
}
func (m *CreateThreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateThreadResponse.Marshal(b, m, deterministic)
}
func (m *CreateThreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThreadResponse.Merge(m, src)
}
func (m *CreateThreadResponse) XXX_Size() int {
	return xxx_messageInfo_CreateThreadResponse.Size(m)
}
func (m *CreateThreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThreadResponse proto.InternalMessageInfo

func (m *CreateThreadResponse) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

// GetThreadRequest holds a single thread id and the section name it belongs to
type GetThreadRequest struct {
	Thread               *context.Thread `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetThreadRequest) Reset()         { *m = GetThreadRequest{} }
func (m *GetThreadRequest) String() string { return proto.CompactTextString(m) }
func (*GetThreadRequest) ProtoMessage()    {}
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{20}
}

func (m *GetThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetThreadRequest.Unmarshal(m, b)
}
func (m *GetThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetThreadRequest.Marshal(b, m, deterministic)
}
func (m *GetThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThreadRequest.Merge(m, src)
}
func (m *GetThreadRequest) XXX_Size() int {
	return xxx_messageInfo_GetThreadRequest.Size(m)
}
func (m *GetThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetThreadRequest proto.InternalMessageInfo

func (m *GetThreadRequest) GetThread() *context.Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

// GetSubcommentsRequest is the message for requesting a comment's subcomments.
type GetSubcommentsRequest struct {
	// comment_ctx indicates what comment is being requested
	CommentCtx *context.Comment `protobuf:"bytes,1,opt,name=comment_ctx,json=commentCtx,proto3" json:"comment_ctx,omitempty"`
	// offset indicates the number of comments to be ignored, since subcomments
	// are stored and returned sequentially in cronological order
	Offset               uint32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubcommentsRequest) Reset()         { *m = GetSubcommentsRequest{} }
func (m *GetSubcommentsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubcommentsRequest) ProtoMessage()    {}
func (*GetSubcommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{21}
}

func (m *GetSubcommentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubcommentsRequest.Unmarshal(m, b)
}
func (m *GetSubcommentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubcommentsRequest.Marshal(b, m, deterministic)
}
func (m *GetSubcommentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubcommentsRequest.Merge(m, src)
}
func (m *GetSubcommentsRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubcommentsRequest.Size(m)
}
func (m *GetSubcommentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubcommentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubcommentsRequest proto.InternalMessageInfo

func (m *GetSubcommentsRequest) GetCommentCtx() *context.Comment {
	if m != nil {
		return m.CommentCtx
	}
	return nil
}

func (m *GetSubcommentsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// SaveThreadRequest holds the id of the user which is saving the thread and the
// information about the thread to be saved.
type SaveThreadRequest struct {
	UserId               string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thread               *context.Thread `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SaveThreadRequest) Reset()         { *m = SaveThreadRequest{} }
func (m *SaveThreadRequest) String() string { return proto.CompactTextString(m) }
func (*SaveThreadRequest) ProtoMessage()    {}
func (*SaveThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{22}
}

func (m *SaveThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveThreadRequest.Unmarshal(m, b)
}
func (m *SaveThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveThreadRequest.Marshal(b, m, deterministic)
}
func (m *SaveThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveThreadRequest.Merge(m, src)
}
func (m *SaveThreadRequest) XXX_Size() int {
	return xxx_messageInfo_SaveThreadRequest.Size(m)
}
func (m *SaveThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveThreadRequest proto.InternalMessageInfo

func (m *SaveThreadRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveThreadRequest) GetThread() *context.Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type SaveThreadResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveThreadResponse) Reset()         { *m = SaveThreadResponse{} }
func (m *SaveThreadResponse) String() string { return proto.CompactTextString(m) }
func (*SaveThreadResponse) ProtoMessage()    {}
func (*SaveThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{23}
}

func (m *SaveThreadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveThreadResponse.Unmarshal(m, b)
}
func (m *SaveThreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveThreadResponse.Marshal(b, m, deterministic)
}
func (m *SaveThreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveThreadResponse.Merge(m, src)
}
func (m *SaveThreadResponse) XXX_Size() int {
	return xxx_messageInfo_SaveThreadResponse.Size(m)
}
func (m *SaveThreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveThreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveThreadResponse proto.InternalMessageInfo

// UndoSaveThreadRequest holds the id of the user which is unsaving the thread and the
// information about the thread to be removed from the user's saved thread list.
type UndoSaveThreadRequest struct {
	UserId               string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thread               *context.Thread `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UndoSaveThreadRequest) Reset()         { *m = UndoSaveThreadRequest{} }
func (m *UndoSaveThreadRequest) String() string { return proto.CompactTextString(m) }
func (*UndoSaveThreadRequest) ProtoMessage()    {}
func (*UndoSaveThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{24}
}

func (m *UndoSaveThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndoSaveThreadRequest.Unmarshal(m, b)
}
func (m *UndoSaveThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndoSaveThreadRequest.Marshal(b, m, deterministic)
}
func (m *UndoSaveThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoSaveThreadRequest.Merge(m, src)
}
func (m *UndoSaveThreadRequest) XXX_Size() int {
	return xxx_messageInfo_UndoSaveThreadRequest.Size(m)
}
func (m *UndoSaveThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoSaveThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UndoSaveThreadRequest proto.InternalMessageInfo

func (m *UndoSaveThreadRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UndoSaveThreadRequest) GetThread() *context.Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type UndoSaveThreadResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UndoSaveThreadResponse) Reset()         { *m = UndoSaveThreadResponse{} }
func (m *UndoSaveThreadResponse) String() string { return proto.CompactTextString(m) }
func (*UndoSaveThreadResponse) ProtoMessage()    {}
func (*UndoSaveThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{25}
}

func (m *UndoSaveThreadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndoSaveThreadResponse.Unmarshal(m, b)
}
func (m *UndoSaveThreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndoSaveThreadResponse.Marshal(b, m, deterministic)
}
func (m *UndoSaveThreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoSaveThreadResponse.Merge(m, src)
}
func (m *UndoSaveThreadResponse) XXX_Size() int {
	return xxx_messageInfo_UndoSaveThreadResponse.Size(m)
}
func (m *UndoSaveThreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoSaveThreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndoSaveThreadResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Content)(nil), "cheropatillapb.Content")
	proto.RegisterType((*ContentAuthor)(nil), "cheropatillapb.ContentAuthor")
	proto.RegisterType((*ContentMetadata)(nil), "cheropatillapb.ContentMetadata")
	proto.RegisterType((*ContentData)(nil), "cheropatillapb.ContentData")
	proto.RegisterType((*NotifyUser)(nil), "cheropatillapb.NotifyUser")
	proto.RegisterType((*ContentPattern)(nil), "cheropatillapb.ContentPattern")
	proto.RegisterType((*GeneralPattern)(nil), "cheropatillapb.GeneralPattern")
	proto.RegisterMapType((map[string]*IdList)(nil), "cheropatillapb.GeneralPattern.DiscardIdsEntry")
	proto.RegisterType((*SavedPattern)(nil), "cheropatillapb.SavedPattern")
	proto.RegisterMapType((map[string]*IdList)(nil), "cheropatillapb.SavedPattern.DiscardIdsEntry")
	proto.RegisterType((*IdList)(nil), "cheropatillapb.IdList")
	proto.RegisterType((*ActivityPattern)(nil), "cheropatillapb.ActivityPattern")
	proto.RegisterMapType((map[string]*dataformat.Activity)(nil), "cheropatillapb.ActivityPattern.DiscardIdsEntry")
	proto.RegisterType((*UserList)(nil), "cheropatillapb.UserList")
	proto.RegisterType((*ContentRule)(nil), "cheropatillapb.ContentRule")
	proto.RegisterType((*UpvoteRequest)(nil), "cheropatillapb.UpvoteRequest")
	proto.RegisterType((*UndoUpvoteRequest)(nil), "cheropatillapb.UndoUpvoteRequest")
	proto.RegisterType((*UndoUpvoteResponse)(nil), "cheropatillapb.UndoUpvoteResponse")
	proto.RegisterType((*CommentRequest)(nil), "cheropatillapb.CommentRequest")
	proto.RegisterType((*DeleteContentRequest)(nil), "cheropatillapb.DeleteContentRequest")
	proto.RegisterType((*DeleteContentResponse)(nil), "cheropatillapb.DeleteContentResponse")
	proto.RegisterType((*CreateThreadRequest)(nil), "cheropatillapb.CreateThreadRequest")
	proto.RegisterType((*CreateThreadResponse)(nil), "cheropatillapb.CreateThreadResponse")
	proto.RegisterType((*GetThreadRequest)(nil), "cheropatillapb.GetThreadRequest")
	proto.RegisterType((*GetSubcommentsRequest)(nil), "cheropatillapb.GetSubcommentsRequest")
	proto.RegisterType((*SaveThreadRequest)(nil), "cheropatillapb.SaveThreadRequest")
	proto.RegisterType((*SaveThreadResponse)(nil), "cheropatillapb.SaveThreadResponse")
	proto.RegisterType((*UndoSaveThreadRequest)(nil), "cheropatillapb.UndoSaveThreadRequest")
	proto.RegisterType((*UndoSaveThreadResponse)(nil), "cheropatillapb.UndoSaveThreadResponse")
}

func init() {
	proto.RegisterFile("cheroapi.proto", fileDescriptor_b3591c2d7d53bb31)
}

var fileDescriptor_b3591c2d7d53bb31 = []byte{
	// 1380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xf6, 0x6e, 0x1a, 0x27, 0x3e, 0x8e, 0xed, 0x64, 0x9a, 0x26, 0x66, 0x5b, 0x48, 0x58, 0xda,
	0x52, 0x55, 0x65, 0xdd, 0xba, 0x54, 0x42, 0x14, 0x2e, 0x5a, 0x07, 0x92, 0x48, 0x2d, 0xb4, 0x9b,
	0x5a, 0xfc, 0x0a, 0x6b, 0xbc, 0x3b, 0x8e, 0x57, 0x5d, 0x7b, 0xcd, 0xee, 0x6c, 0x48, 0xee, 0x78,
	0x02, 0x24, 0x24, 0x78, 0x13, 0xde, 0x80, 0xf7, 0x40, 0x5c, 0x20, 0xb8, 0xe0, 0x92, 0x17, 0x40,
	0xf3, 0xb3, 0xeb, 0xfd, 0xb3, 0x5d, 0x14, 0xf5, 0x82, 0xde, 0x79, 0xe6, 0xfc, 0xcc, 0xf9, 0xce,
	0x39, 0xf3, 0xcd, 0x59, 0x43, 0xdd, 0x1a, 0x12, 0xdf, 0xc3, 0x13, 0xc7, 0x98, 0xf8, 0x1e, 0xf5,
	0x90, 0x58, 0x4f, 0x30, 0x75, 0x5c, 0x17, 0x4f, 0xfa, 0xda, 0xce, 0xb1, 0xe7, 0x1d, 0xbb, 0xa4,
	0xc5, 0xa5, 0xfd, 0x70, 0xd0, 0xa2, 0xce, 0x88, 0x04, 0x14, 0x8f, 0x26, 0xc2, 0x40, 0xdb, 0xb0,
	0x31, 0xc5, 0xbd, 0x81, 0xe7, 0x8f, 0x30, 0x95, 0x5b, 0x35, 0xcb, 0x1b, 0x53, 0x72, 0x1a, 0x2d,
	0xeb, 0x23, 0x42, 0x31, 0xd3, 0x12, 0x6b, 0xfd, 0x47, 0x05, 0x56, 0x3a, 0x4c, 0x63, 0x4c, 0xd1,
	0x26, 0x2c, 0x53, 0x87, 0xba, 0xa4, 0xa9, 0xec, 0x2a, 0x37, 0x2a, 0xa6, 0x58, 0xa0, 0x26, 0xac,
	0x58, 0x42, 0xa1, 0xa9, 0xf2, 0xfd, 0x68, 0x89, 0xb6, 0x61, 0x65, 0x40, 0x7b, 0x03, 0xc7, 0x25,
	0xcd, 0x25, 0x2e, 0x29, 0x0f, 0xe8, 0xc7, 0x8e, 0x4b, 0xd0, 0x87, 0xb0, 0x36, 0x09, 0xfb, 0xae,
	0x13, 0x0c, 0x7b, 0x36, 0xa6, 0xa4, 0x79, 0x61, 0x57, 0xb9, 0x51, 0x6d, 0x6b, 0x86, 0x08, 0xdf,
	0x88, 0xc2, 0x37, 0x9e, 0x45, 0xe1, 0x9b, 0x55, 0xa9, 0xbf, 0x87, 0x29, 0xd1, 0x9f, 0x42, 0x4d,
	0x86, 0xf4, 0x20, 0xa4, 0x43, 0xcf, 0x47, 0x75, 0x50, 0x1d, 0x5b, 0x46, 0xa5, 0x3a, 0x36, 0xd2,
	0x60, 0x35, 0x0c, 0x88, 0x3f, 0xc6, 0x23, 0x22, 0x63, 0x8a, 0xd7, 0x0c, 0x04, 0x76, 0x1d, 0x1c,
	0xc8, 0x90, 0xc4, 0x42, 0xff, 0x47, 0x81, 0x86, 0xf4, 0xf9, 0x58, 0x26, 0x20, 0xe7, 0xb5, 0x09,
	0x2b, 0x01, 0xb1, 0xa8, 0xe3, 0x8d, 0x23, 0xa0, 0x72, 0x89, 0xae, 0x40, 0x65, 0x42, 0xfc, 0x11,
	0x76, 0x9d, 0xf1, 0x73, 0xe9, 0x77, 0xba, 0xc1, 0xec, 0xc2, 0xc9, 0x89, 0x47, 0x49, 0xc0, 0x81,
	0xd6, 0xcc, 0x68, 0xc9, 0x24, 0x3e, 0x99, 0xb8, 0x0e, 0x09, 0x9a, 0xcb, 0x42, 0x22, 0x97, 0xe8,
	0x32, 0x54, 0x98, 0x8a, 0xdf, 0x73, 0xec, 0xa0, 0x59, 0xde, 0x5d, 0x62, 0x10, 0xf8, 0xc6, 0xa1,
	0x1d, 0xa0, 0x1d, 0xa8, 0x0a, 0x3d, 0x21, 0x5e, 0xe1, 0x62, 0x90, 0x5b, 0x4c, 0xe1, 0x3a, 0x34,
	0x18, 0xde, 0xa0, 0xf7, 0xdd, 0xd0, 0xeb, 0x05, 0xf8, 0x84, 0xd8, 0xcd, 0x55, 0xae, 0x54, 0xe3,
	0xdb, 0x9f, 0x0d, 0xbd, 0x23, 0xb6, 0xa9, 0xff, 0xa2, 0x40, 0x55, 0xa2, 0xde, 0x63, 0x88, 0xef,
	0x41, 0x19, 0xf3, 0x8c, 0x72, 0xd4, 0xd5, 0xf6, 0xeb, 0x46, 0xba, 0xc1, 0x8c, 0x54, 0xda, 0x4d,
	0xa9, 0x8c, 0xee, 0xa4, 0x3b, 0xa0, 0xda, 0xde, 0x9e, 0x61, 0x37, 0x6d, 0x8d, 0xfb, 0xb0, 0x1a,
	0x35, 0x1a, 0x4f, 0x58, 0xb5, 0xbd, 0x33, 0xc3, 0x26, 0x2a, 0x87, 0x19, 0x1b, 0xe8, 0x5f, 0x03,
	0x7c, 0xe2, 0x51, 0x67, 0x70, 0xd6, 0x0d, 0x88, 0xcf, 0xba, 0x8c, 0xa1, 0xea, 0xc5, 0xb5, 0x2a,
	0xb3, 0xe5, 0xa1, 0x8d, 0xee, 0xc1, 0xda, 0x98, 0xa9, 0x39, 0x16, 0x8e, 0x8b, 0x56, 0x6d, 0x6f,
	0x18, 0xcc, 0x87, 0xbc, 0x02, 0xdc, 0x8d, 0x99, 0x52, 0xd3, 0x7f, 0x53, 0xa0, 0x2e, 0xcf, 0x7e,
	0x82, 0x29, 0x25, 0xfe, 0x98, 0x01, 0x9c, 0x88, 0x9f, 0x4d, 0x65, 0x77, 0xe9, 0x46, 0xbd, 0xbd,
	0x6d, 0xc4, 0xd7, 0x44, 0xaa, 0x1e, 0x51, 0x4c, 0xc3, 0xc0, 0x8c, 0xf4, 0x58, 0x8d, 0x6c, 0x27,
	0xb0, 0xb0, 0x6f, 0xf3, 0x1a, 0xa9, 0xa2, 0x46, 0x72, 0x8b, 0xd5, 0xe8, 0x2e, 0x54, 0x65, 0xfb,
	0xf4, 0x2c, 0x7a, 0x2a, 0x93, 0xb0, 0x6e, 0x44, 0xb7, 0xf1, 0x48, 0xc8, 0x0e, 0x4a, 0x26, 0x48,
	0xb5, 0x0e, 0x3d, 0x45, 0xb7, 0x01, 0xe8, 0xd0, 0x27, 0xd8, 0xe6, 0x36, 0xe2, 0xda, 0x34, 0x62,
	0x9b, 0x67, 0x5c, 0x74, 0x50, 0x32, 0x2b, 0x42, 0xa9, 0x43, 0x4f, 0x1f, 0x6e, 0x40, 0x43, 0xe6,
	0xbc, 0x27, 0xd5, 0xf4, 0xbf, 0x15, 0xa8, 0xef, 0x93, 0x31, 0xf1, 0xb1, 0x7b, 0x0e, 0x80, 0x9f,
	0xe6, 0x01, 0x56, 0xdb, 0x46, 0xb6, 0x88, 0xe9, 0x73, 0x8c, 0xbd, 0x18, 0xff, 0x47, 0x63, 0xea,
	0x9f, 0x25, 0x13, 0xa2, 0x75, 0xa1, 0x91, 0x11, 0xa3, 0x75, 0x58, 0x7a, 0x4e, 0xce, 0x64, 0x59,
	0xd9, 0x4f, 0x74, 0x0b, 0x96, 0x4f, 0xb0, 0x1b, 0x12, 0x59, 0xcc, 0xad, 0xec, 0x79, 0x87, 0xf6,
	0x23, 0x27, 0xa0, 0xa6, 0x50, 0x7a, 0x5f, 0x7d, 0x4f, 0xd1, 0xbf, 0x57, 0x61, 0x8d, 0x77, 0xfb,
	0x39, 0xb0, 0x3e, 0x2e, 0xc2, 0x7a, 0x2b, 0x7b, 0x76, 0xf2, 0x94, 0x79, 0x48, 0x93, 0x1d, 0xbb,
	0x94, 0xec, 0xd8, 0x97, 0x95, 0x02, 0x0d, 0xca, 0x62, 0x93, 0x79, 0x63, 0x00, 0x14, 0xde, 0x8d,
	0xec, 0xa7, 0xfe, 0xab, 0x0a, 0x8d, 0x07, 0x16, 0x75, 0x4e, 0x1c, 0x7a, 0x76, 0x8e, 0x0c, 0x3d,
	0x29, 0xca, 0x50, 0x2b, 0x1b, 0x5a, 0xe6, 0xa0, 0xb9, 0x49, 0xba, 0x0d, 0xcb, 0x9c, 0xac, 0xe4,
	0xcd, 0x68, 0x66, 0x7d, 0xb1, 0xbb, 0xcf, 0x30, 0x1d, 0x94, 0x4c, 0xa1, 0x88, 0x5e, 0x9b, 0xa6,
	0x95, 0xdd, 0x8c, 0xca, 0x41, 0x29, 0x4e, 0xec, 0xd1, 0x8b, 0x24, 0xf6, 0x66, 0x3a, 0xb1, 0x9b,
	0x49, 0xa2, 0x88, 0x22, 0x4f, 0xa4, 0xf5, 0x61, 0x45, 0xd2, 0xde, 0x29, 0xd5, 0xaf, 0xc0, 0x6a,
	0x14, 0x4f, 0x41, 0x8e, 0x7f, 0x50, 0x63, 0x9a, 0x35, 0x43, 0x97, 0xa0, 0x16, 0x5c, 0xe0, 0xc4,
	0x27, 0x48, 0xf6, 0xf2, 0x0c, 0xe2, 0x63, 0x8c, 0x6c, 0x72, 0xc5, 0xcc, 0xb5, 0x57, 0x17, 0x5f,
	0x7b, 0xc6, 0x2e, 0x96, 0x37, 0x1a, 0xf1, 0x6b, 0x5f, 0xc0, 0x2e, 0x1d, 0x21, 0x63, 0xec, 0x22,
	0xd5, 0x98, 0xd1, 0x07, 0x50, 0x0f, 0xc2, 0x7e, 0xd2, 0x4e, 0x30, 0xcc, 0xc5, 0x29, 0x2b, 0xc5,
	0xe2, 0x83, 0x92, 0x59, 0x9b, 0x2a, 0x33, 0xeb, 0x2d, 0x28, 0x07, 0xbc, 0x2b, 0xf8, 0x5b, 0x56,
	0x31, 0xe5, 0xaa, 0x88, 0x81, 0x7e, 0x57, 0xa0, 0xd6, 0xe5, 0x6f, 0xa0, 0x49, 0xbe, 0x0d, 0x49,
	0x40, 0x67, 0x93, 0xf8, 0xff, 0x01, 0x7a, 0x11, 0xc4, 0x3f, 0x14, 0xd8, 0xe8, 0x8e, 0x6d, 0xef,
	0x15, 0x87, 0xb9, 0x09, 0x28, 0x89, 0x32, 0x98, 0x78, 0xe3, 0x80, 0xe8, 0x3f, 0xab, 0xec, 0x09,
	0xe5, 0x76, 0x11, 0xf2, 0xc4, 0x94, 0xa8, 0xcc, 0x9c, 0x12, 0xd5, 0xd4, 0x94, 0x38, 0x8b, 0x26,
	0xcf, 0x39, 0x3e, 0x66, 0x72, 0xbd, 0xfc, 0xdf, 0x73, 0x5d, 0x7e, 0x91, 0x5c, 0x17, 0x65, 0xeb,
	0x2f, 0x05, 0x36, 0xf7, 0x88, 0x4b, 0x28, 0x89, 0xe8, 0xe0, 0x55, 0xed, 0x8b, 0x6d, 0xb8, 0x94,
	0x01, 0x2a, 0x5b, 0xe3, 0x27, 0x05, 0x2e, 0x76, 0x7c, 0x82, 0x29, 0x11, 0xc1, 0x47, 0x19, 0xb8,
	0x93, 0xee, 0x8f, 0x17, 0x99, 0x21, 0xef, 0xa4, 0x27, 0x28, 0xb5, 0x78, 0x82, 0x4a, 0xcd, 0x4f,
	0xb3, 0x5a, 0x4a, 0x7f, 0x17, 0x36, 0xd3, 0x51, 0x89, 0x70, 0xd3, 0x93, 0xbd, 0x92, 0x99, 0xec,
	0xf5, 0xfb, 0xb0, 0xbe, 0x4f, 0x68, 0x1a, 0xc8, 0xdb, 0x50, 0x16, 0xc5, 0x90, 0x38, 0xb2, 0xd5,
	0x32, 0xa5, 0x58, 0xef, 0xc3, 0xa5, 0x7d, 0x42, 0xa7, 0x79, 0x0d, 0xa6, 0xa9, 0x48, 0x55, 0x50,
	0x29, 0xae, 0x60, 0xaa, 0x7e, 0x5b, 0x50, 0xf6, 0x06, 0x83, 0x80, 0x88, 0x01, 0xbc, 0x66, 0xca,
	0x95, 0xde, 0x85, 0x0d, 0x36, 0x95, 0xa4, 0x23, 0x9c, 0xd9, 0x6c, 0xd3, 0xd0, 0xd5, 0xf9, 0xa1,
	0x6f, 0x02, 0x4a, 0xba, 0x95, 0xa5, 0xfd, 0x02, 0x2e, 0x31, 0x2e, 0x78, 0x19, 0x07, 0x36, 0x61,
	0x2b, 0xeb, 0x5a, 0x1c, 0xda, 0xfe, 0x73, 0x15, 0xd6, 0x3b, 0x7e, 0x68, 0x77, 0x12, 0xcd, 0x82,
	0x9e, 0x42, 0xdd, 0x24, 0xd6, 0x99, 0xe5, 0x46, 0xed, 0x87, 0xde, 0x98, 0xd1, 0x4d, 0x72, 0x12,
	0xd1, 0x66, 0x3d, 0xc2, 0xec, 0xbd, 0xd6, 0x4b, 0xb7, 0x95, 0x84, 0x4b, 0x39, 0xd2, 0xe6, 0x5d,
	0xa6, 0x67, 0xdd, 0xc5, 0x2e, 0x8f, 0xa0, 0x21, 0x5d, 0x46, 0xd3, 0x05, 0xda, 0x59, 0x30, 0x31,
	0x2d, 0x76, 0xfa, 0x18, 0xd6, 0xa4, 0x53, 0x3e, 0x8e, 0xa2, 0x2b, 0xf3, 0xa6, 0xd4, 0xc5, 0xee,
	0xf6, 0xa1, 0x2c, 0xb8, 0x1d, 0xe5, 0xbe, 0x05, 0x53, 0x2f, 0x9b, 0xa6, 0x65, 0xc5, 0xd3, 0x2f,
	0x34, 0xee, 0xa8, 0x0b, 0x30, 0x7d, 0x28, 0xd0, 0x9b, 0x39, 0x67, 0xd9, 0xa7, 0x52, 0xd3, 0xe7,
	0xa9, 0xc8, 0x8e, 0x2b, 0xa1, 0x43, 0x58, 0x91, 0xf7, 0xa1, 0xa8, 0xc4, 0xc9, 0x17, 0x68, 0x61,
	0x84, 0xdf, 0x40, 0x2d, 0x45, 0x59, 0xe8, 0x6a, 0xd6, 0xa0, 0x88, 0xba, 0xb5, 0x6b, 0x0b, 0xb4,
	0xe2, 0x50, 0xbf, 0x82, 0xb5, 0x24, 0xc5, 0xa0, 0xb7, 0x72, 0xf1, 0xe6, 0x69, 0x51, 0xbb, 0x3a,
	0x5f, 0x29, 0x76, 0xfe, 0x08, 0x2a, 0x31, 0x13, 0xa1, 0xdd, 0x7c, 0x67, 0xa6, 0x49, 0x4a, 0x9b,
	0x37, 0x73, 0xea, 0x25, 0xf4, 0x39, 0xfb, 0x40, 0x4c, 0x52, 0x13, 0xba, 0x56, 0xe0, 0x32, 0x4f,
	0x5d, 0x8b, 0xfb, 0xa9, 0x0b, 0x30, 0xbd, 0xc4, 0xf9, 0x36, 0xc8, 0x71, 0x47, 0xbe, 0x0d, 0x0a,
	0x88, 0xa7, 0x84, 0x30, 0xd4, 0xd3, 0xfc, 0x90, 0x0f, 0xb8, 0x90, 0x9a, 0xb4, 0xeb, 0x8b, 0xd4,
	0xa2, 0x23, 0x1e, 0xde, 0xfa, 0xf2, 0xe6, 0xb1, 0x43, 0x87, 0x61, 0xdf, 0xb0, 0xbc, 0x51, 0xcb,
	0x0d, 0x9d, 0xe0, 0x38, 0x3c, 0x21, 0x2d, 0x61, 0xce, 0x26, 0x8e, 0x77, 0x8e, 0xbd, 0x56, 0xf4,
	0xff, 0x5c, 0xbf, 0xcc, 0xb7, 0xee, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x84, 0xde, 0x89, 0x74,
	0xb2, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context1.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrudCheropatillaClient is the client API for CrudCheropatilla service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrudCheropatillaClient interface {
	// Get new feed of either threads in a section or comments in a thread.
	//
	// In case of being called in the context of a section, it returns only
	// threads that are currently active, as opposed to comments in a thread,
	// in which case the type of content is considered always active, despite
	// the current status of the thread they belong to.
	//
	// It may return a codes.InvalidArgument error in case of being passed a
	// request with a nil ContentContext or a codes.Internal error in case of
	// a database querying or network issue.
	RecycleContent(ctx context1.Context, in *ContentPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleContentClient, error)
	// Get new feed of threads in general (from multiple sections)
	RecycleGeneral(ctx context1.Context, in *GeneralPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleGeneralClient, error)
	// Get new activity from either multiple users or a single user.
	RecycleActivity(ctx context1.Context, in *ActivityPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleActivityClient, error)
	// Get new feed of saved threads of a user
	RecycleSaved(ctx context1.Context, in *SavedPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleSavedClient, error)
	// Post upvote on thread, comment or subcomment
	Upvote(ctx context1.Context, in *UpvoteRequest, opts ...grpc.CallOption) (CrudCheropatilla_UpvoteClient, error)
	// Undo upvote on a thread, comment or subcomment
	UndoUpvote(ctx context1.Context, in *UndoUpvoteRequest, opts ...grpc.CallOption) (*UndoUpvoteResponse, error)
	// Post comment on a thread or in a comment
	Comment(ctx context1.Context, in *CommentRequest, opts ...grpc.CallOption) (CrudCheropatilla_CommentClient, error)
	// Update a thread, comment or subcomment
	// rpc UpdateContent(UpdateContentRequest) returns (stream NotifyUser) {}
	// Delete a thread, comment or subcomment
	DeleteContent(ctx context1.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*DeleteContentResponse, error)
	// Post a thread to create
	CreateThread(ctx context1.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	// Get a single thread
	GetThread(ctx context1.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ContentData, error)
	// Get a comment's comments
	GetSubcomments(ctx context1.Context, in *GetSubcommentsRequest, opts ...grpc.CallOption) (CrudCheropatilla_GetSubcommentsClient, error)
	// Request to save thread
	SaveThread(ctx context1.Context, in *SaveThreadRequest, opts ...grpc.CallOption) (*SaveThreadResponse, error)
	// Request to remove thread from user's list of saved threads
	UndoSaveThread(ctx context1.Context, in *UndoSaveThreadRequest, opts ...grpc.CallOption) (*UndoSaveThreadResponse, error)
}

type crudCheropatillaClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudCheropatillaClient(cc grpc.ClientConnInterface) CrudCheropatillaClient {
	return &crudCheropatillaClient{cc}
}

func (c *crudCheropatillaClient) RecycleContent(ctx context1.Context, in *ContentPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[0], "/cheropatillapb.CrudCheropatilla/RecycleContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleContentClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleContentClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleContentClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) RecycleGeneral(ctx context1.Context, in *GeneralPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleGeneralClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[1], "/cheropatillapb.CrudCheropatilla/RecycleGeneral", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleGeneralClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleGeneralClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleGeneralClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleGeneralClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) RecycleActivity(ctx context1.Context, in *ActivityPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[2], "/cheropatillapb.CrudCheropatilla/RecycleActivity", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleActivityClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleActivityClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleActivityClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) RecycleSaved(ctx context1.Context, in *SavedPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleSavedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[3], "/cheropatillapb.CrudCheropatilla/RecycleSaved", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleSavedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleSavedClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleSavedClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleSavedClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) Upvote(ctx context1.Context, in *UpvoteRequest, opts ...grpc.CallOption) (CrudCheropatilla_UpvoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[4], "/cheropatillapb.CrudCheropatilla/Upvote", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaUpvoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_UpvoteClient interface {
	Recv() (*NotifyUser, error)
	grpc.ClientStream
}

type crudCheropatillaUpvoteClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaUpvoteClient) Recv() (*NotifyUser, error) {
	m := new(NotifyUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) UndoUpvote(ctx context1.Context, in *UndoUpvoteRequest, opts ...grpc.CallOption) (*UndoUpvoteResponse, error) {
	out := new(UndoUpvoteResponse)
	err := c.cc.Invoke(ctx, "/cheropatillapb.CrudCheropatilla/UndoUpvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) Comment(ctx context1.Context, in *CommentRequest, opts ...grpc.CallOption) (CrudCheropatilla_CommentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[5], "/cheropatillapb.CrudCheropatilla/Comment", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaCommentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_CommentClient interface {
	Recv() (*NotifyUser, error)
	grpc.ClientStream
}

type crudCheropatillaCommentClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaCommentClient) Recv() (*NotifyUser, error) {
	m := new(NotifyUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) DeleteContent(ctx context1.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*DeleteContentResponse, error) {
	out := new(DeleteContentResponse)
	err := c.cc.Invoke(ctx, "/cheropatillapb.CrudCheropatilla/DeleteContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) CreateThread(ctx context1.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	out := new(CreateThreadResponse)
	err := c.cc.Invoke(ctx, "/cheropatillapb.CrudCheropatilla/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetThread(ctx context1.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ContentData, error) {
	out := new(ContentData)
	err := c.cc.Invoke(ctx, "/cheropatillapb.CrudCheropatilla/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetSubcomments(ctx context1.Context, in *GetSubcommentsRequest, opts ...grpc.CallOption) (CrudCheropatilla_GetSubcommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[6], "/cheropatillapb.CrudCheropatilla/GetSubcomments", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaGetSubcommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_GetSubcommentsClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaGetSubcommentsClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaGetSubcommentsClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) SaveThread(ctx context1.Context, in *SaveThreadRequest, opts ...grpc.CallOption) (*SaveThreadResponse, error) {
	out := new(SaveThreadResponse)
	err := c.cc.Invoke(ctx, "/cheropatillapb.CrudCheropatilla/SaveThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) UndoSaveThread(ctx context1.Context, in *UndoSaveThreadRequest, opts ...grpc.CallOption) (*UndoSaveThreadResponse, error) {
	out := new(UndoSaveThreadResponse)
	err := c.cc.Invoke(ctx, "/cheropatillapb.CrudCheropatilla/UndoSaveThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudCheropatillaServer is the server API for CrudCheropatilla service.
type CrudCheropatillaServer interface {
	// Get new feed of either threads in a section or comments in a thread.
	//
	// In case of being called in the context of a section, it returns only
	// threads that are currently active, as opposed to comments in a thread,
	// in which case the type of content is considered always active, despite
	// the current status of the thread they belong to.
	//
	// It may return a codes.InvalidArgument error in case of being passed a
	// request with a nil ContentContext or a codes.Internal error in case of
	// a database querying or network issue.
	RecycleContent(*ContentPattern, CrudCheropatilla_RecycleContentServer) error
	// Get new feed of threads in general (from multiple sections)
	RecycleGeneral(*GeneralPattern, CrudCheropatilla_RecycleGeneralServer) error
	// Get new activity from either multiple users or a single user.
	RecycleActivity(*ActivityPattern, CrudCheropatilla_RecycleActivityServer) error
	// Get new feed of saved threads of a user
	RecycleSaved(*SavedPattern, CrudCheropatilla_RecycleSavedServer) error
	// Post upvote on thread, comment or subcomment
	Upvote(*UpvoteRequest, CrudCheropatilla_UpvoteServer) error
	// Undo upvote on a thread, comment or subcomment
	UndoUpvote(context1.Context, *UndoUpvoteRequest) (*UndoUpvoteResponse, error)
	// Post comment on a thread or in a comment
	Comment(*CommentRequest, CrudCheropatilla_CommentServer) error
	// Update a thread, comment or subcomment
	// rpc UpdateContent(UpdateContentRequest) returns (stream NotifyUser) {}
	// Delete a thread, comment or subcomment
	DeleteContent(context1.Context, *DeleteContentRequest) (*DeleteContentResponse, error)
	// Post a thread to create
	CreateThread(context1.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	// Get a single thread
	GetThread(context1.Context, *GetThreadRequest) (*ContentData, error)
	// Get a comment's comments
	GetSubcomments(*GetSubcommentsRequest, CrudCheropatilla_GetSubcommentsServer) error
	// Request to save thread
	SaveThread(context1.Context, *SaveThreadRequest) (*SaveThreadResponse, error)
	// Request to remove thread from user's list of saved threads
	UndoSaveThread(context1.Context, *UndoSaveThreadRequest) (*UndoSaveThreadResponse, error)
}

// UnimplementedCrudCheropatillaServer can be embedded to have forward compatible implementations.
type UnimplementedCrudCheropatillaServer struct {
}

func (*UnimplementedCrudCheropatillaServer) RecycleContent(req *ContentPattern, srv CrudCheropatilla_RecycleContentServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleContent not implemented")
}
func (*UnimplementedCrudCheropatillaServer) RecycleGeneral(req *GeneralPattern, srv CrudCheropatilla_RecycleGeneralServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleGeneral not implemented")
}
func (*UnimplementedCrudCheropatillaServer) RecycleActivity(req *ActivityPattern, srv CrudCheropatilla_RecycleActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleActivity not implemented")
}
func (*UnimplementedCrudCheropatillaServer) RecycleSaved(req *SavedPattern, srv CrudCheropatilla_RecycleSavedServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleSaved not implemented")
}
func (*UnimplementedCrudCheropatillaServer) Upvote(req *UpvoteRequest, srv CrudCheropatilla_UpvoteServer) error {
	return status.Errorf(codes.Unimplemented, "method Upvote not implemented")
}
func (*UnimplementedCrudCheropatillaServer) UndoUpvote(ctx context1.Context, req *UndoUpvoteRequest) (*UndoUpvoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoUpvote not implemented")
}
func (*UnimplementedCrudCheropatillaServer) Comment(req *CommentRequest, srv CrudCheropatilla_CommentServer) error {
	return status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (*UnimplementedCrudCheropatillaServer) DeleteContent(ctx context1.Context, req *DeleteContentRequest) (*DeleteContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContent not implemented")
}
func (*UnimplementedCrudCheropatillaServer) CreateThread(ctx context1.Context, req *CreateThreadRequest) (*CreateThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetThread(ctx context1.Context, req *GetThreadRequest) (*ContentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetSubcomments(req *GetSubcommentsRequest, srv CrudCheropatilla_GetSubcommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSubcomments not implemented")
}
func (*UnimplementedCrudCheropatillaServer) SaveThread(ctx context1.Context, req *SaveThreadRequest) (*SaveThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveThread not implemented")
}
func (*UnimplementedCrudCheropatillaServer) UndoSaveThread(ctx context1.Context, req *UndoSaveThreadRequest) (*UndoSaveThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoSaveThread not implemented")
}

func RegisterCrudCheropatillaServer(s *grpc.Server, srv CrudCheropatillaServer) {
	s.RegisterService(&_CrudCheropatilla_serviceDesc, srv)
}

func _CrudCheropatilla_RecycleContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleContent(m, &crudCheropatillaRecycleContentServer{stream})
}

type CrudCheropatilla_RecycleContentServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleContentServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleContentServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_RecycleGeneral_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GeneralPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleGeneral(m, &crudCheropatillaRecycleGeneralServer{stream})
}

type CrudCheropatilla_RecycleGeneralServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleGeneralServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleGeneralServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_RecycleActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActivityPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleActivity(m, &crudCheropatillaRecycleActivityServer{stream})
}

type CrudCheropatilla_RecycleActivityServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleActivityServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleActivityServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_RecycleSaved_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SavedPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleSaved(m, &crudCheropatillaRecycleSavedServer{stream})
}

type CrudCheropatilla_RecycleSavedServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleSavedServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleSavedServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_Upvote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpvoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).Upvote(m, &crudCheropatillaUpvoteServer{stream})
}

type CrudCheropatilla_UpvoteServer interface {
	Send(*NotifyUser) error
	grpc.ServerStream
}

type crudCheropatillaUpvoteServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaUpvoteServer) Send(m *NotifyUser) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_UndoUpvote_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoUpvoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).UndoUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheropatillapb.CrudCheropatilla/UndoUpvote",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).UndoUpvote(ctx, req.(*UndoUpvoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_Comment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).Comment(m, &crudCheropatillaCommentServer{stream})
}

type CrudCheropatilla_CommentServer interface {
	Send(*NotifyUser) error
	grpc.ServerStream
}

type crudCheropatillaCommentServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaCommentServer) Send(m *NotifyUser) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_DeleteContent_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheropatillapb.CrudCheropatilla/DeleteContent",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).DeleteContent(ctx, req.(*DeleteContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_CreateThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheropatillapb.CrudCheropatilla/CreateThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheropatillapb.CrudCheropatilla/GetThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetSubcomments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSubcommentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).GetSubcomments(m, &crudCheropatillaGetSubcommentsServer{stream})
}

type CrudCheropatilla_GetSubcommentsServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaGetSubcommentsServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaGetSubcommentsServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_SaveThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).SaveThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheropatillapb.CrudCheropatilla/SaveThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).SaveThread(ctx, req.(*SaveThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_UndoSaveThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoSaveThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).UndoSaveThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheropatillapb.CrudCheropatilla/UndoSaveThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).UndoSaveThread(ctx, req.(*UndoSaveThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrudCheropatilla_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheropatillapb.CrudCheropatilla",
	HandlerType: (*CrudCheropatillaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UndoUpvote",
			Handler:    _CrudCheropatilla_UndoUpvote_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _CrudCheropatilla_DeleteContent_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _CrudCheropatilla_CreateThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _CrudCheropatilla_GetThread_Handler,
		},
		{
			MethodName: "SaveThread",
			Handler:    _CrudCheropatilla_SaveThread_Handler,
		},
		{
			MethodName: "UndoSaveThread",
			Handler:    _CrudCheropatilla_UndoSaveThread_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecycleContent",
			Handler:       _CrudCheropatilla_RecycleContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecycleGeneral",
			Handler:       _CrudCheropatilla_RecycleGeneral_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecycleActivity",
			Handler:       _CrudCheropatilla_RecycleActivity_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecycleSaved",
			Handler:       _CrudCheropatilla_RecycleSaved_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upvote",
			Handler:       _CrudCheropatilla_Upvote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Comment",
			Handler:       _CrudCheropatilla_Comment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSubcomments",
			Handler:       _CrudCheropatilla_GetSubcomments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cheroapi.proto",
}
