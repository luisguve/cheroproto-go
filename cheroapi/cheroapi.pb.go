// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cheroapi.proto

// Package cheropatillapb defines the interface to send and receive messages to
// and from the server.

package cheroapi

import (
	context1 "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "github.com/luisguve/cheroproto-go/context"
	dataformat "github.com/luisguve/cheroproto-go/dataformat"
	metadata "github.com/luisguve/cheroproto-go/metadata"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Content struct {
	Title                string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content              string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	FtFile               string               `protobuf:"bytes,3,opt,name=ft_file,json=ftFile,proto3" json:"ft_file,omitempty"`
	PublishDate          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{0}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Content) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Content) GetFtFile() string {
	if m != nil {
		return m.FtFile
	}
	return ""
}

func (m *Content) GetPublishDate() *timestamp.Timestamp {
	if m != nil {
		return m.PublishDate
	}
	return nil
}

type ContentAuthor struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Alias                string   `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentAuthor) Reset()         { *m = ContentAuthor{} }
func (m *ContentAuthor) String() string { return proto.CompactTextString(m) }
func (*ContentAuthor) ProtoMessage()    {}
func (*ContentAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{1}
}

func (m *ContentAuthor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentAuthor.Unmarshal(m, b)
}
func (m *ContentAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentAuthor.Marshal(b, m, deterministic)
}
func (m *ContentAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentAuthor.Merge(m, src)
}
func (m *ContentAuthor) XXX_Size() int {
	return xxx_messageInfo_ContentAuthor.Size(m)
}
func (m *ContentAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_ContentAuthor proto.InternalMessageInfo

func (m *ContentAuthor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContentAuthor) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ContentAuthor) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type ContentMetadata struct {
	// id contains the THREAD ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// section is the name of the section
	Section string `protobuf:"bytes,2,opt,name=section,proto3" json:"section,omitempty"`
	// permalink is the full url to the content, including any fragment
	Permalink  string   `protobuf:"bytes,3,opt,name=permalink,proto3" json:"permalink,omitempty"`
	Topvotes   uint32   `protobuf:"varint,4,opt,name=topvotes,proto3" json:"topvotes,omitempty"`
	Replies    uint32   `protobuf:"varint,5,opt,name=replies,proto3" json:"replies,omitempty"`
	VoterIds   []string `protobuf:"bytes,6,rep,name=voter_ids,json=voterIds,proto3" json:"voter_ids,omitempty"`
	ReplierIds []string `protobuf:"bytes,7,rep,name=replier_ids,json=replierIds,proto3" json:"replier_ids,omitempty"`
	// list of users who saved this content
	UsersWhoSaved        []string `protobuf:"bytes,8,rep,name=users_who_saved,json=usersWhoSaved,proto3" json:"users_who_saved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContentMetadata) Reset()         { *m = ContentMetadata{} }
func (m *ContentMetadata) String() string { return proto.CompactTextString(m) }
func (*ContentMetadata) ProtoMessage()    {}
func (*ContentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{2}
}

func (m *ContentMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentMetadata.Unmarshal(m, b)
}
func (m *ContentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentMetadata.Marshal(b, m, deterministic)
}
func (m *ContentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentMetadata.Merge(m, src)
}
func (m *ContentMetadata) XXX_Size() int {
	return xxx_messageInfo_ContentMetadata.Size(m)
}
func (m *ContentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ContentMetadata proto.InternalMessageInfo

func (m *ContentMetadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContentMetadata) GetSection() string {
	if m != nil {
		return m.Section
	}
	return ""
}

func (m *ContentMetadata) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *ContentMetadata) GetTopvotes() uint32 {
	if m != nil {
		return m.Topvotes
	}
	return 0
}

func (m *ContentMetadata) GetReplies() uint32 {
	if m != nil {
		return m.Replies
	}
	return 0
}

func (m *ContentMetadata) GetVoterIds() []string {
	if m != nil {
		return m.VoterIds
	}
	return nil
}

func (m *ContentMetadata) GetReplierIds() []string {
	if m != nil {
		return m.ReplierIds
	}
	return nil
}

func (m *ContentMetadata) GetUsersWhoSaved() []string {
	if m != nil {
		return m.UsersWhoSaved
	}
	return nil
}

type ContentData struct {
	Author               *ContentAuthor   `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Content              *Content         `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Metadata             *ContentMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ContentData) Reset()         { *m = ContentData{} }
func (m *ContentData) String() string { return proto.CompactTextString(m) }
func (*ContentData) ProtoMessage()    {}
func (*ContentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{3}
}

func (m *ContentData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentData.Unmarshal(m, b)
}
func (m *ContentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentData.Marshal(b, m, deterministic)
}
func (m *ContentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentData.Merge(m, src)
}
func (m *ContentData) XXX_Size() int {
	return xxx_messageInfo_ContentData.Size(m)
}
func (m *ContentData) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentData.DiscardUnknown(m)
}

var xxx_messageInfo_ContentData proto.InternalMessageInfo

func (m *ContentData) GetAuthor() *ContentAuthor {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ContentData) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ContentData) GetMetadata() *ContentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// UserHeaderData holds information to be displayed in the header navigation section
// of every page.
type UserHeaderData struct {
	Alias    string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// unread notifications of this user.
	UnreadNotifs []*dataformat.Notif `protobuf:"bytes,3,rep,name=unread_notifs,json=unreadNotifs,proto3" json:"unread_notifs,omitempty"`
	// read notifications of this user.
	ReadNotifs []*dataformat.Notif `protobuf:"bytes,4,rep,name=read_notifs,json=readNotifs,proto3" json:"read_notifs,omitempty"`
	// last time this user created a thread
	LastTimeCreated      *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_time_created,json=lastTimeCreated,proto3" json:"last_time_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserHeaderData) Reset()         { *m = UserHeaderData{} }
func (m *UserHeaderData) String() string { return proto.CompactTextString(m) }
func (*UserHeaderData) ProtoMessage()    {}
func (*UserHeaderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{4}
}

func (m *UserHeaderData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserHeaderData.Unmarshal(m, b)
}
func (m *UserHeaderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserHeaderData.Marshal(b, m, deterministic)
}
func (m *UserHeaderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserHeaderData.Merge(m, src)
}
func (m *UserHeaderData) XXX_Size() int {
	return xxx_messageInfo_UserHeaderData.Size(m)
}
func (m *UserHeaderData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserHeaderData.DiscardUnknown(m)
}

var xxx_messageInfo_UserHeaderData proto.InternalMessageInfo

func (m *UserHeaderData) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *UserHeaderData) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserHeaderData) GetUnreadNotifs() []*dataformat.Notif {
	if m != nil {
		return m.UnreadNotifs
	}
	return nil
}

func (m *UserHeaderData) GetReadNotifs() []*dataformat.Notif {
	if m != nil {
		return m.ReadNotifs
	}
	return nil
}

func (m *UserHeaderData) GetLastTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.LastTimeCreated
	}
	return nil
}

// NotifyUser maps notifications to users.
type NotifyUser struct {
	UserId               string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Notification         *dataformat.Notif `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NotifyUser) Reset()         { *m = NotifyUser{} }
func (m *NotifyUser) String() string { return proto.CompactTextString(m) }
func (*NotifyUser) ProtoMessage()    {}
func (*NotifyUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{5}
}

func (m *NotifyUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyUser.Unmarshal(m, b)
}
func (m *NotifyUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyUser.Marshal(b, m, deterministic)
}
func (m *NotifyUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyUser.Merge(m, src)
}
func (m *NotifyUser) XXX_Size() int {
	return xxx_messageInfo_NotifyUser.Size(m)
}
func (m *NotifyUser) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyUser.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyUser proto.InternalMessageInfo

func (m *NotifyUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *NotifyUser) GetNotification() *dataformat.Notif {
	if m != nil {
		return m.Notification
	}
	return nil
}

// ContentPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling content of a specific
// type: either threads in a section, or comments in a thread.
type ContentPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is an array of content ids that must not be returned back, since it's
	// content the user has already seen.
	DiscardIds []string `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty"`
	// content_context represents the place in which the content must be retrieved from.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*ContentPattern_SectionCtx
	//	*ContentPattern_ThreadCtx
	ContentContext       isContentPattern_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ContentPattern) Reset()         { *m = ContentPattern{} }
func (m *ContentPattern) String() string { return proto.CompactTextString(m) }
func (*ContentPattern) ProtoMessage()    {}
func (*ContentPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{6}
}

func (m *ContentPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentPattern.Unmarshal(m, b)
}
func (m *ContentPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentPattern.Marshal(b, m, deterministic)
}
func (m *ContentPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentPattern.Merge(m, src)
}
func (m *ContentPattern) XXX_Size() int {
	return xxx_messageInfo_ContentPattern.Size(m)
}
func (m *ContentPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentPattern.DiscardUnknown(m)
}

var xxx_messageInfo_ContentPattern proto.InternalMessageInfo

func (m *ContentPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *ContentPattern) GetDiscardIds() []string {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

type isContentPattern_ContentContext interface {
	isContentPattern_ContentContext()
}

type ContentPattern_SectionCtx struct {
	SectionCtx *context.Section `protobuf:"bytes,3,opt,name=section_ctx,json=sectionCtx,proto3,oneof"`
}

type ContentPattern_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,4,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

func (*ContentPattern_SectionCtx) isContentPattern_ContentContext() {}

func (*ContentPattern_ThreadCtx) isContentPattern_ContentContext() {}

func (m *ContentPattern) GetContentContext() isContentPattern_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *ContentPattern) GetSectionCtx() *context.Section {
	if x, ok := m.GetContentContext().(*ContentPattern_SectionCtx); ok {
		return x.SectionCtx
	}
	return nil
}

func (m *ContentPattern) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*ContentPattern_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContentPattern) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContentPattern_SectionCtx)(nil),
		(*ContentPattern_ThreadCtx)(nil),
	}
}

// GeneralPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling content from every section.
type GeneralPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is a map of section names mapped to content ids that must not be
	// returned back, since it's content the user has already seen.
	DiscardIds           map[string]*IdList `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GeneralPattern) Reset()         { *m = GeneralPattern{} }
func (m *GeneralPattern) String() string { return proto.CompactTextString(m) }
func (*GeneralPattern) ProtoMessage()    {}
func (*GeneralPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{7}
}

func (m *GeneralPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeneralPattern.Unmarshal(m, b)
}
func (m *GeneralPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeneralPattern.Marshal(b, m, deterministic)
}
func (m *GeneralPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralPattern.Merge(m, src)
}
func (m *GeneralPattern) XXX_Size() int {
	return xxx_messageInfo_GeneralPattern.Size(m)
}
func (m *GeneralPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralPattern.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralPattern proto.InternalMessageInfo

func (m *GeneralPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *GeneralPattern) GetDiscardIds() map[string]*IdList {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

// SavedPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling content in the context
// of a user viewing his saved threads.
type SavedPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is a map of section names mapped to content ids that must not be
	// returned back, since it's content the user has already seen.
	DiscardIds map[string]*IdList `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the user
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SavedPattern) Reset()         { *m = SavedPattern{} }
func (m *SavedPattern) String() string { return proto.CompactTextString(m) }
func (*SavedPattern) ProtoMessage()    {}
func (*SavedPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{8}
}

func (m *SavedPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SavedPattern.Unmarshal(m, b)
}
func (m *SavedPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SavedPattern.Marshal(b, m, deterministic)
}
func (m *SavedPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedPattern.Merge(m, src)
}
func (m *SavedPattern) XXX_Size() int {
	return xxx_messageInfo_SavedPattern.Size(m)
}
func (m *SavedPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedPattern.DiscardUnknown(m)
}

var xxx_messageInfo_SavedPattern proto.InternalMessageInfo

func (m *SavedPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *SavedPattern) GetDiscardIds() map[string]*IdList {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

func (m *SavedPattern) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// IdList holds a list of ids of content
type IdList struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdList) Reset()         { *m = IdList{} }
func (m *IdList) String() string { return proto.CompactTextString(m) }
func (*IdList) ProtoMessage()    {}
func (*IdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{9}
}

func (m *IdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdList.Unmarshal(m, b)
}
func (m *IdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdList.Marshal(b, m, deterministic)
}
func (m *IdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdList.Merge(m, src)
}
func (m *IdList) XXX_Size() int {
	return xxx_messageInfo_IdList.Size(m)
}
func (m *IdList) XXX_DiscardUnknown() {
	xxx_messageInfo_IdList.DiscardUnknown(m)
}

var xxx_messageInfo_IdList proto.InternalMessageInfo

func (m *IdList) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

// ActivityPattern holds an array of ContentStatus, composing up a pattern of content
// that's expected to get back. It is intended for recycling activity from a specific
// user or a list of users.
type ActivityPattern struct {
	Pattern []metadata.ContentStatus `protobuf:"varint,1,rep,packed,name=pattern,proto3,enum=metadata.ContentStatus" json:"pattern,omitempty"`
	// discard_ids is a map of user_ids to activity from the user referred to by
	// the key that must not be returned back, since it's content the user has
	// already seen.
	DiscardIds map[string]*dataformat.Activity `protobuf:"bytes,2,rep,name=discard_ids,json=discardIds,proto3" json:"discard_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// context is either users following or the user itself.
	//
	// Types that are valid to be assigned to Context:
	//	*ActivityPattern_Users
	//	*ActivityPattern_UserId
	Context              isActivityPattern_Context `protobuf_oneof:"context"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ActivityPattern) Reset()         { *m = ActivityPattern{} }
func (m *ActivityPattern) String() string { return proto.CompactTextString(m) }
func (*ActivityPattern) ProtoMessage()    {}
func (*ActivityPattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{10}
}

func (m *ActivityPattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivityPattern.Unmarshal(m, b)
}
func (m *ActivityPattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivityPattern.Marshal(b, m, deterministic)
}
func (m *ActivityPattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityPattern.Merge(m, src)
}
func (m *ActivityPattern) XXX_Size() int {
	return xxx_messageInfo_ActivityPattern.Size(m)
}
func (m *ActivityPattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityPattern.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityPattern proto.InternalMessageInfo

func (m *ActivityPattern) GetPattern() []metadata.ContentStatus {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *ActivityPattern) GetDiscardIds() map[string]*dataformat.Activity {
	if m != nil {
		return m.DiscardIds
	}
	return nil
}

type isActivityPattern_Context interface {
	isActivityPattern_Context()
}

type ActivityPattern_Users struct {
	Users *UserList `protobuf:"bytes,3,opt,name=users,proto3,oneof"`
}

type ActivityPattern_UserId struct {
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*ActivityPattern_Users) isActivityPattern_Context() {}

func (*ActivityPattern_UserId) isActivityPattern_Context() {}

func (m *ActivityPattern) GetContext() isActivityPattern_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ActivityPattern) GetUsers() *UserList {
	if x, ok := m.GetContext().(*ActivityPattern_Users); ok {
		return x.Users
	}
	return nil
}

func (m *ActivityPattern) GetUserId() string {
	if x, ok := m.GetContext().(*ActivityPattern_UserId); ok {
		return x.UserId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActivityPattern) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActivityPattern_Users)(nil),
		(*ActivityPattern_UserId)(nil),
	}
}

// UserList holds a list of user ids
type UserList struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{11}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

// ContentRule holds a piece of content, its current status and its type.
type ContentRule struct {
	Data *ContentData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Types that are valid to be assigned to ContentContext:
	//	*ContentRule_ThreadCtx
	//	*ContentRule_CommentCtx
	//	*ContentRule_SubcommentCtx
	ContentContext       isContentRule_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ContentRule) Reset()         { *m = ContentRule{} }
func (m *ContentRule) String() string { return proto.CompactTextString(m) }
func (*ContentRule) ProtoMessage()    {}
func (*ContentRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{12}
}

func (m *ContentRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentRule.Unmarshal(m, b)
}
func (m *ContentRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentRule.Marshal(b, m, deterministic)
}
func (m *ContentRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentRule.Merge(m, src)
}
func (m *ContentRule) XXX_Size() int {
	return xxx_messageInfo_ContentRule.Size(m)
}
func (m *ContentRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentRule.DiscardUnknown(m)
}

var xxx_messageInfo_ContentRule proto.InternalMessageInfo

func (m *ContentRule) GetData() *ContentData {
	if m != nil {
		return m.Data
	}
	return nil
}

type isContentRule_ContentContext interface {
	isContentRule_ContentContext()
}

type ContentRule_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type ContentRule_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type ContentRule_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*ContentRule_ThreadCtx) isContentRule_ContentContext() {}

func (*ContentRule_CommentCtx) isContentRule_ContentContext() {}

func (*ContentRule_SubcommentCtx) isContentRule_ContentContext() {}

func (m *ContentRule) GetContentContext() isContentRule_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *ContentRule) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*ContentRule_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *ContentRule) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*ContentRule_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *ContentRule) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*ContentRule_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContentRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContentRule_ThreadCtx)(nil),
		(*ContentRule_CommentCtx)(nil),
		(*ContentRule_SubcommentCtx)(nil),
	}
}

// UpvoteRequest holds information about the upvote event.
type UpvoteRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The upvote event occurs either in a thread, in a comment or in a subcomment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*UpvoteRequest_ThreadCtx
	//	*UpvoteRequest_CommentCtx
	//	*UpvoteRequest_SubcommentCtx
	ContentContext       isUpvoteRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UpvoteRequest) Reset()         { *m = UpvoteRequest{} }
func (m *UpvoteRequest) String() string { return proto.CompactTextString(m) }
func (*UpvoteRequest) ProtoMessage()    {}
func (*UpvoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{13}
}

func (m *UpvoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpvoteRequest.Unmarshal(m, b)
}
func (m *UpvoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpvoteRequest.Marshal(b, m, deterministic)
}
func (m *UpvoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpvoteRequest.Merge(m, src)
}
func (m *UpvoteRequest) XXX_Size() int {
	return xxx_messageInfo_UpvoteRequest.Size(m)
}
func (m *UpvoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpvoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpvoteRequest proto.InternalMessageInfo

func (m *UpvoteRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type isUpvoteRequest_ContentContext interface {
	isUpvoteRequest_ContentContext()
}

type UpvoteRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type UpvoteRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type UpvoteRequest_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*UpvoteRequest_ThreadCtx) isUpvoteRequest_ContentContext() {}

func (*UpvoteRequest_CommentCtx) isUpvoteRequest_ContentContext() {}

func (*UpvoteRequest_SubcommentCtx) isUpvoteRequest_ContentContext() {}

func (m *UpvoteRequest) GetContentContext() isUpvoteRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *UpvoteRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*UpvoteRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *UpvoteRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*UpvoteRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *UpvoteRequest) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*UpvoteRequest_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpvoteRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpvoteRequest_ThreadCtx)(nil),
		(*UpvoteRequest_CommentCtx)(nil),
		(*UpvoteRequest_SubcommentCtx)(nil),
	}
}

// UndoUpvoteRequest holds information about the upvote undoing event.
type UndoUpvoteRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The upvote event occurs either in a thread, in a comment or in a subcomment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*UndoUpvoteRequest_ThreadCtx
	//	*UndoUpvoteRequest_CommentCtx
	//	*UndoUpvoteRequest_SubcommentCtx
	ContentContext       isUndoUpvoteRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *UndoUpvoteRequest) Reset()         { *m = UndoUpvoteRequest{} }
func (m *UndoUpvoteRequest) String() string { return proto.CompactTextString(m) }
func (*UndoUpvoteRequest) ProtoMessage()    {}
func (*UndoUpvoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{14}
}

func (m *UndoUpvoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndoUpvoteRequest.Unmarshal(m, b)
}
func (m *UndoUpvoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndoUpvoteRequest.Marshal(b, m, deterministic)
}
func (m *UndoUpvoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoUpvoteRequest.Merge(m, src)
}
func (m *UndoUpvoteRequest) XXX_Size() int {
	return xxx_messageInfo_UndoUpvoteRequest.Size(m)
}
func (m *UndoUpvoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoUpvoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UndoUpvoteRequest proto.InternalMessageInfo

func (m *UndoUpvoteRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type isUndoUpvoteRequest_ContentContext interface {
	isUndoUpvoteRequest_ContentContext()
}

type UndoUpvoteRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type UndoUpvoteRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type UndoUpvoteRequest_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*UndoUpvoteRequest_ThreadCtx) isUndoUpvoteRequest_ContentContext() {}

func (*UndoUpvoteRequest_CommentCtx) isUndoUpvoteRequest_ContentContext() {}

func (*UndoUpvoteRequest_SubcommentCtx) isUndoUpvoteRequest_ContentContext() {}

func (m *UndoUpvoteRequest) GetContentContext() isUndoUpvoteRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *UndoUpvoteRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*UndoUpvoteRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *UndoUpvoteRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*UndoUpvoteRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *UndoUpvoteRequest) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*UndoUpvoteRequest_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UndoUpvoteRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UndoUpvoteRequest_ThreadCtx)(nil),
		(*UndoUpvoteRequest_CommentCtx)(nil),
		(*UndoUpvoteRequest_SubcommentCtx)(nil),
	}
}

type UndoUpvoteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UndoUpvoteResponse) Reset()         { *m = UndoUpvoteResponse{} }
func (m *UndoUpvoteResponse) String() string { return proto.CompactTextString(m) }
func (*UndoUpvoteResponse) ProtoMessage()    {}
func (*UndoUpvoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{15}
}

func (m *UndoUpvoteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndoUpvoteResponse.Unmarshal(m, b)
}
func (m *UndoUpvoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndoUpvoteResponse.Marshal(b, m, deterministic)
}
func (m *UndoUpvoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoUpvoteResponse.Merge(m, src)
}
func (m *UndoUpvoteResponse) XXX_Size() int {
	return xxx_messageInfo_UndoUpvoteResponse.Size(m)
}
func (m *UndoUpvoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoUpvoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndoUpvoteResponse proto.InternalMessageInfo

// CommentRequest holds information about the comment event.
type CommentRequest struct {
	// A comment has the same basic structure as regular content but doesn't have a title.
	Content     string               `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	FtFile      string               `protobuf:"bytes,2,opt,name=ft_file,json=ftFile,proto3" json:"ft_file,omitempty"`
	UserId      string               `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PublishDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=publish_date,json=publishDate,proto3" json:"publish_date,omitempty"`
	// The comment event occurs either in a thread or in a comment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*CommentRequest_ThreadCtx
	//	*CommentRequest_CommentCtx
	ContentContext       isCommentRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CommentRequest) Reset()         { *m = CommentRequest{} }
func (m *CommentRequest) String() string { return proto.CompactTextString(m) }
func (*CommentRequest) ProtoMessage()    {}
func (*CommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{16}
}

func (m *CommentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentRequest.Unmarshal(m, b)
}
func (m *CommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentRequest.Marshal(b, m, deterministic)
}
func (m *CommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentRequest.Merge(m, src)
}
func (m *CommentRequest) XXX_Size() int {
	return xxx_messageInfo_CommentRequest.Size(m)
}
func (m *CommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentRequest proto.InternalMessageInfo

func (m *CommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CommentRequest) GetFtFile() string {
	if m != nil {
		return m.FtFile
	}
	return ""
}

func (m *CommentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CommentRequest) GetPublishDate() *timestamp.Timestamp {
	if m != nil {
		return m.PublishDate
	}
	return nil
}

type isCommentRequest_ContentContext interface {
	isCommentRequest_ContentContext()
}

type CommentRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,5,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type CommentRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,6,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

func (*CommentRequest_ThreadCtx) isCommentRequest_ContentContext() {}

func (*CommentRequest_CommentCtx) isCommentRequest_ContentContext() {}

func (m *CommentRequest) GetContentContext() isCommentRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *CommentRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*CommentRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *CommentRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*CommentRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommentRequest_ThreadCtx)(nil),
		(*CommentRequest_CommentCtx)(nil),
	}
}

// UpdateContentRequest holds the updated content.
type UpdateContentRequest struct {
	// data holds the actual content updated.
	Data *Content `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The user id of who's submitting the updated content must match the user id of
	// the original author of the content.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The update content event occurs either in a thread, in a comment or in a subcomment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*UpdateContentRequest_ThreadCtx
	//	*UpdateContentRequest_CommentCtx
	//	*UpdateContentRequest_SubcommentCtx
	ContentContext       isUpdateContentRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *UpdateContentRequest) Reset()         { *m = UpdateContentRequest{} }
func (m *UpdateContentRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateContentRequest) ProtoMessage()    {}
func (*UpdateContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{17}
}

func (m *UpdateContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateContentRequest.Unmarshal(m, b)
}
func (m *UpdateContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateContentRequest.Marshal(b, m, deterministic)
}
func (m *UpdateContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContentRequest.Merge(m, src)
}
func (m *UpdateContentRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateContentRequest.Size(m)
}
func (m *UpdateContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContentRequest proto.InternalMessageInfo

func (m *UpdateContentRequest) GetData() *Content {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpdateContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type isUpdateContentRequest_ContentContext interface {
	isUpdateContentRequest_ContentContext()
}

type UpdateContentRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,3,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type UpdateContentRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,4,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type UpdateContentRequest_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,5,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*UpdateContentRequest_ThreadCtx) isUpdateContentRequest_ContentContext() {}

func (*UpdateContentRequest_CommentCtx) isUpdateContentRequest_ContentContext() {}

func (*UpdateContentRequest_SubcommentCtx) isUpdateContentRequest_ContentContext() {}

func (m *UpdateContentRequest) GetContentContext() isUpdateContentRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *UpdateContentRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*UpdateContentRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *UpdateContentRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*UpdateContentRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *UpdateContentRequest) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*UpdateContentRequest_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateContentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateContentRequest_ThreadCtx)(nil),
		(*UpdateContentRequest_CommentCtx)(nil),
		(*UpdateContentRequest_SubcommentCtx)(nil),
	}
}

// DeleteContentRequest holds information about the delete content event.
type DeleteContentRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The delete content event occurs either in a thread, in a comment or in a subcomment.
	//
	// Types that are valid to be assigned to ContentContext:
	//	*DeleteContentRequest_ThreadCtx
	//	*DeleteContentRequest_CommentCtx
	//	*DeleteContentRequest_SubcommentCtx
	ContentContext       isDeleteContentRequest_ContentContext `protobuf_oneof:"content_context"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *DeleteContentRequest) Reset()         { *m = DeleteContentRequest{} }
func (m *DeleteContentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteContentRequest) ProtoMessage()    {}
func (*DeleteContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{18}
}

func (m *DeleteContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteContentRequest.Unmarshal(m, b)
}
func (m *DeleteContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteContentRequest.Marshal(b, m, deterministic)
}
func (m *DeleteContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteContentRequest.Merge(m, src)
}
func (m *DeleteContentRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteContentRequest.Size(m)
}
func (m *DeleteContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteContentRequest proto.InternalMessageInfo

func (m *DeleteContentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type isDeleteContentRequest_ContentContext interface {
	isDeleteContentRequest_ContentContext()
}

type DeleteContentRequest_ThreadCtx struct {
	ThreadCtx *context.Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type DeleteContentRequest_CommentCtx struct {
	CommentCtx *context.Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type DeleteContentRequest_SubcommentCtx struct {
	SubcommentCtx *context.Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*DeleteContentRequest_ThreadCtx) isDeleteContentRequest_ContentContext() {}

func (*DeleteContentRequest_CommentCtx) isDeleteContentRequest_ContentContext() {}

func (*DeleteContentRequest_SubcommentCtx) isDeleteContentRequest_ContentContext() {}

func (m *DeleteContentRequest) GetContentContext() isDeleteContentRequest_ContentContext {
	if m != nil {
		return m.ContentContext
	}
	return nil
}

func (m *DeleteContentRequest) GetThreadCtx() *context.Thread {
	if x, ok := m.GetContentContext().(*DeleteContentRequest_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *DeleteContentRequest) GetCommentCtx() *context.Comment {
	if x, ok := m.GetContentContext().(*DeleteContentRequest_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *DeleteContentRequest) GetSubcommentCtx() *context.Subcomment {
	if x, ok := m.GetContentContext().(*DeleteContentRequest_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeleteContentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeleteContentRequest_ThreadCtx)(nil),
		(*DeleteContentRequest_CommentCtx)(nil),
		(*DeleteContentRequest_SubcommentCtx)(nil),
	}
}

type DeleteContentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteContentResponse) Reset()         { *m = DeleteContentResponse{} }
func (m *DeleteContentResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteContentResponse) ProtoMessage()    {}
func (*DeleteContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{19}
}

func (m *DeleteContentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteContentResponse.Unmarshal(m, b)
}
func (m *DeleteContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteContentResponse.Marshal(b, m, deterministic)
}
func (m *DeleteContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteContentResponse.Merge(m, src)
}
func (m *DeleteContentResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteContentResponse.Size(m)
}
func (m *DeleteContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteContentResponse proto.InternalMessageInfo

// CreateThreadRequest holds the content of the thread, the section at which the content
// is being created and the id of the author.
type CreateThreadRequest struct {
	Content              *Content         `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	SectionCtx           *context.Section `protobuf:"bytes,2,opt,name=section_ctx,json=sectionCtx,proto3" json:"section_ctx,omitempty"`
	UserId               string           `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateThreadRequest) Reset()         { *m = CreateThreadRequest{} }
func (m *CreateThreadRequest) String() string { return proto.CompactTextString(m) }
func (*CreateThreadRequest) ProtoMessage()    {}
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{20}
}

func (m *CreateThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateThreadRequest.Unmarshal(m, b)
}
func (m *CreateThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateThreadRequest.Marshal(b, m, deterministic)
}
func (m *CreateThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThreadRequest.Merge(m, src)
}
func (m *CreateThreadRequest) XXX_Size() int {
	return xxx_messageInfo_CreateThreadRequest.Size(m)
}
func (m *CreateThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThreadRequest proto.InternalMessageInfo

func (m *CreateThreadRequest) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *CreateThreadRequest) GetSectionCtx() *context.Section {
	if m != nil {
		return m.SectionCtx
	}
	return nil
}

func (m *CreateThreadRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// CreateThreadResponse holds the relative URL of the thread just created
type CreateThreadResponse struct {
	Permalink            string   `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateThreadResponse) Reset()         { *m = CreateThreadResponse{} }
func (m *CreateThreadResponse) String() string { return proto.CompactTextString(m) }
func (*CreateThreadResponse) ProtoMessage()    {}
func (*CreateThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{21}
}

func (m *CreateThreadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateThreadResponse.Unmarshal(m, b)
}
func (m *CreateThreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateThreadResponse.Marshal(b, m, deterministic)
}
func (m *CreateThreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateThreadResponse.Merge(m, src)
}
func (m *CreateThreadResponse) XXX_Size() int {
	return xxx_messageInfo_CreateThreadResponse.Size(m)
}
func (m *CreateThreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateThreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateThreadResponse proto.InternalMessageInfo

func (m *CreateThreadResponse) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

// GetBasicUserDataRequest holds the id of the user to get its basic data
type GetBasicUserDataRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBasicUserDataRequest) Reset()         { *m = GetBasicUserDataRequest{} }
func (m *GetBasicUserDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetBasicUserDataRequest) ProtoMessage()    {}
func (*GetBasicUserDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{22}
}

func (m *GetBasicUserDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBasicUserDataRequest.Unmarshal(m, b)
}
func (m *GetBasicUserDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBasicUserDataRequest.Marshal(b, m, deterministic)
}
func (m *GetBasicUserDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBasicUserDataRequest.Merge(m, src)
}
func (m *GetBasicUserDataRequest) XXX_Size() int {
	return xxx_messageInfo_GetBasicUserDataRequest.Size(m)
}
func (m *GetBasicUserDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBasicUserDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBasicUserDataRequest proto.InternalMessageInfo

func (m *GetBasicUserDataRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// UpdateBasicUserDataRequest holds public data of a user that could be updated.
type UpdateBasicUserDataRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	PicUrl               string   `protobuf:"bytes,4,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	Alias                string   `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBasicUserDataRequest) Reset()         { *m = UpdateBasicUserDataRequest{} }
func (m *UpdateBasicUserDataRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBasicUserDataRequest) ProtoMessage()    {}
func (*UpdateBasicUserDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{23}
}

func (m *UpdateBasicUserDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBasicUserDataRequest.Unmarshal(m, b)
}
func (m *UpdateBasicUserDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBasicUserDataRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBasicUserDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBasicUserDataRequest.Merge(m, src)
}
func (m *UpdateBasicUserDataRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBasicUserDataRequest.Size(m)
}
func (m *UpdateBasicUserDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBasicUserDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBasicUserDataRequest proto.InternalMessageInfo

func (m *UpdateBasicUserDataRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateBasicUserDataRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UpdateBasicUserDataRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateBasicUserDataRequest) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

func (m *UpdateBasicUserDataRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type UpdateBasicUserDataResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBasicUserDataResponse) Reset()         { *m = UpdateBasicUserDataResponse{} }
func (m *UpdateBasicUserDataResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBasicUserDataResponse) ProtoMessage()    {}
func (*UpdateBasicUserDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{24}
}

func (m *UpdateBasicUserDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBasicUserDataResponse.Unmarshal(m, b)
}
func (m *UpdateBasicUserDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBasicUserDataResponse.Marshal(b, m, deterministic)
}
func (m *UpdateBasicUserDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBasicUserDataResponse.Merge(m, src)
}
func (m *UpdateBasicUserDataResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateBasicUserDataResponse.Size(m)
}
func (m *UpdateBasicUserDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBasicUserDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBasicUserDataResponse proto.InternalMessageInfo

// GetThreadRequest holds a single thread id and the section name it belongs to
type GetThreadRequest struct {
	Thread               *context.Thread `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetThreadRequest) Reset()         { *m = GetThreadRequest{} }
func (m *GetThreadRequest) String() string { return proto.CompactTextString(m) }
func (*GetThreadRequest) ProtoMessage()    {}
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{25}
}

func (m *GetThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetThreadRequest.Unmarshal(m, b)
}
func (m *GetThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetThreadRequest.Marshal(b, m, deterministic)
}
func (m *GetThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThreadRequest.Merge(m, src)
}
func (m *GetThreadRequest) XXX_Size() int {
	return xxx_messageInfo_GetThreadRequest.Size(m)
}
func (m *GetThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetThreadRequest proto.InternalMessageInfo

func (m *GetThreadRequest) GetThread() *context.Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

// GetSubcommentsRequest is the message for requesting a comment's subcomments.
type GetSubcommentsRequest struct {
	// comment_ctx indicates what comment is being requested
	CommentCtx *context.Comment `protobuf:"bytes,1,opt,name=comment_ctx,json=commentCtx,proto3" json:"comment_ctx,omitempty"`
	// offset indicates the number of comments to be ignored, since subcomments
	// are stored and returned sequentially in cronological order
	Offset               uint32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubcommentsRequest) Reset()         { *m = GetSubcommentsRequest{} }
func (m *GetSubcommentsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubcommentsRequest) ProtoMessage()    {}
func (*GetSubcommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{26}
}

func (m *GetSubcommentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubcommentsRequest.Unmarshal(m, b)
}
func (m *GetSubcommentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubcommentsRequest.Marshal(b, m, deterministic)
}
func (m *GetSubcommentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubcommentsRequest.Merge(m, src)
}
func (m *GetSubcommentsRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubcommentsRequest.Size(m)
}
func (m *GetSubcommentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubcommentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubcommentsRequest proto.InternalMessageInfo

func (m *GetSubcommentsRequest) GetCommentCtx() *context.Comment {
	if m != nil {
		return m.CommentCtx
	}
	return nil
}

func (m *GetSubcommentsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ReadNotifsRequest holds the id of the user whose unread notifications will be
// marked as read
type ReadNotifsRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadNotifsRequest) Reset()         { *m = ReadNotifsRequest{} }
func (m *ReadNotifsRequest) String() string { return proto.CompactTextString(m) }
func (*ReadNotifsRequest) ProtoMessage()    {}
func (*ReadNotifsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{27}
}

func (m *ReadNotifsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadNotifsRequest.Unmarshal(m, b)
}
func (m *ReadNotifsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadNotifsRequest.Marshal(b, m, deterministic)
}
func (m *ReadNotifsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadNotifsRequest.Merge(m, src)
}
func (m *ReadNotifsRequest) XXX_Size() int {
	return xxx_messageInfo_ReadNotifsRequest.Size(m)
}
func (m *ReadNotifsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadNotifsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadNotifsRequest proto.InternalMessageInfo

func (m *ReadNotifsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ReadNotifsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadNotifsResponse) Reset()         { *m = ReadNotifsResponse{} }
func (m *ReadNotifsResponse) String() string { return proto.CompactTextString(m) }
func (*ReadNotifsResponse) ProtoMessage()    {}
func (*ReadNotifsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{28}
}

func (m *ReadNotifsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadNotifsResponse.Unmarshal(m, b)
}
func (m *ReadNotifsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadNotifsResponse.Marshal(b, m, deterministic)
}
func (m *ReadNotifsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadNotifsResponse.Merge(m, src)
}
func (m *ReadNotifsResponse) XXX_Size() int {
	return xxx_messageInfo_ReadNotifsResponse.Size(m)
}
func (m *ReadNotifsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadNotifsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadNotifsResponse proto.InternalMessageInfo

// ClearNotifsRequest holds the id of the user whose both unread and read
// notifications will be deleted
type ClearNotifsRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearNotifsRequest) Reset()         { *m = ClearNotifsRequest{} }
func (m *ClearNotifsRequest) String() string { return proto.CompactTextString(m) }
func (*ClearNotifsRequest) ProtoMessage()    {}
func (*ClearNotifsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{29}
}

func (m *ClearNotifsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearNotifsRequest.Unmarshal(m, b)
}
func (m *ClearNotifsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearNotifsRequest.Marshal(b, m, deterministic)
}
func (m *ClearNotifsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearNotifsRequest.Merge(m, src)
}
func (m *ClearNotifsRequest) XXX_Size() int {
	return xxx_messageInfo_ClearNotifsRequest.Size(m)
}
func (m *ClearNotifsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearNotifsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearNotifsRequest proto.InternalMessageInfo

func (m *ClearNotifsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ClearNotifsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearNotifsResponse) Reset()         { *m = ClearNotifsResponse{} }
func (m *ClearNotifsResponse) String() string { return proto.CompactTextString(m) }
func (*ClearNotifsResponse) ProtoMessage()    {}
func (*ClearNotifsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{30}
}

func (m *ClearNotifsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearNotifsResponse.Unmarshal(m, b)
}
func (m *ClearNotifsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearNotifsResponse.Marshal(b, m, deterministic)
}
func (m *ClearNotifsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearNotifsResponse.Merge(m, src)
}
func (m *ClearNotifsResponse) XXX_Size() int {
	return xxx_messageInfo_ClearNotifsResponse.Size(m)
}
func (m *ClearNotifsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearNotifsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClearNotifsResponse proto.InternalMessageInfo

// FollowUserRequest holds the id of the user which is following and the username
// of the user being followed
type FollowUserRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// user_to_follow indicates the username
	UserToFollow         string   `protobuf:"bytes,2,opt,name=user_to_follow,json=userToFollow,proto3" json:"user_to_follow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowUserRequest) Reset()         { *m = FollowUserRequest{} }
func (m *FollowUserRequest) String() string { return proto.CompactTextString(m) }
func (*FollowUserRequest) ProtoMessage()    {}
func (*FollowUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{31}
}

func (m *FollowUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FollowUserRequest.Unmarshal(m, b)
}
func (m *FollowUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FollowUserRequest.Marshal(b, m, deterministic)
}
func (m *FollowUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowUserRequest.Merge(m, src)
}
func (m *FollowUserRequest) XXX_Size() int {
	return xxx_messageInfo_FollowUserRequest.Size(m)
}
func (m *FollowUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FollowUserRequest proto.InternalMessageInfo

func (m *FollowUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *FollowUserRequest) GetUserToFollow() string {
	if m != nil {
		return m.UserToFollow
	}
	return ""
}

type FollowUserResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowUserResponse) Reset()         { *m = FollowUserResponse{} }
func (m *FollowUserResponse) String() string { return proto.CompactTextString(m) }
func (*FollowUserResponse) ProtoMessage()    {}
func (*FollowUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{32}
}

func (m *FollowUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FollowUserResponse.Unmarshal(m, b)
}
func (m *FollowUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FollowUserResponse.Marshal(b, m, deterministic)
}
func (m *FollowUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowUserResponse.Merge(m, src)
}
func (m *FollowUserResponse) XXX_Size() int {
	return xxx_messageInfo_FollowUserResponse.Size(m)
}
func (m *FollowUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FollowUserResponse proto.InternalMessageInfo

// UnfollowUserRequest holds the id of the user which is unfollowing and the username
// of the user losing a follower
type UnfollowUserRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserToUnfollow       string   `protobuf:"bytes,2,opt,name=user_to_unfollow,json=userToUnfollow,proto3" json:"user_to_unfollow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnfollowUserRequest) Reset()         { *m = UnfollowUserRequest{} }
func (m *UnfollowUserRequest) String() string { return proto.CompactTextString(m) }
func (*UnfollowUserRequest) ProtoMessage()    {}
func (*UnfollowUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{33}
}

func (m *UnfollowUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnfollowUserRequest.Unmarshal(m, b)
}
func (m *UnfollowUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnfollowUserRequest.Marshal(b, m, deterministic)
}
func (m *UnfollowUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnfollowUserRequest.Merge(m, src)
}
func (m *UnfollowUserRequest) XXX_Size() int {
	return xxx_messageInfo_UnfollowUserRequest.Size(m)
}
func (m *UnfollowUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnfollowUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnfollowUserRequest proto.InternalMessageInfo

func (m *UnfollowUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UnfollowUserRequest) GetUserToUnfollow() string {
	if m != nil {
		return m.UserToUnfollow
	}
	return ""
}

type UnfollowUserResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnfollowUserResponse) Reset()         { *m = UnfollowUserResponse{} }
func (m *UnfollowUserResponse) String() string { return proto.CompactTextString(m) }
func (*UnfollowUserResponse) ProtoMessage()    {}
func (*UnfollowUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{34}
}

func (m *UnfollowUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnfollowUserResponse.Unmarshal(m, b)
}
func (m *UnfollowUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnfollowUserResponse.Marshal(b, m, deterministic)
}
func (m *UnfollowUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnfollowUserResponse.Merge(m, src)
}
func (m *UnfollowUserResponse) XXX_Size() int {
	return xxx_messageInfo_UnfollowUserResponse.Size(m)
}
func (m *UnfollowUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnfollowUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnfollowUserResponse proto.InternalMessageInfo

// SaveThreadRequest holds the id of the user which is saving the thread and the
// information about the thread to be saved.
type SaveThreadRequest struct {
	UserId               string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thread               *context.Thread `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SaveThreadRequest) Reset()         { *m = SaveThreadRequest{} }
func (m *SaveThreadRequest) String() string { return proto.CompactTextString(m) }
func (*SaveThreadRequest) ProtoMessage()    {}
func (*SaveThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{35}
}

func (m *SaveThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveThreadRequest.Unmarshal(m, b)
}
func (m *SaveThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveThreadRequest.Marshal(b, m, deterministic)
}
func (m *SaveThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveThreadRequest.Merge(m, src)
}
func (m *SaveThreadRequest) XXX_Size() int {
	return xxx_messageInfo_SaveThreadRequest.Size(m)
}
func (m *SaveThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveThreadRequest proto.InternalMessageInfo

func (m *SaveThreadRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveThreadRequest) GetThread() *context.Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type SaveThreadResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveThreadResponse) Reset()         { *m = SaveThreadResponse{} }
func (m *SaveThreadResponse) String() string { return proto.CompactTextString(m) }
func (*SaveThreadResponse) ProtoMessage()    {}
func (*SaveThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{36}
}

func (m *SaveThreadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveThreadResponse.Unmarshal(m, b)
}
func (m *SaveThreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveThreadResponse.Marshal(b, m, deterministic)
}
func (m *SaveThreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveThreadResponse.Merge(m, src)
}
func (m *SaveThreadResponse) XXX_Size() int {
	return xxx_messageInfo_SaveThreadResponse.Size(m)
}
func (m *SaveThreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveThreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveThreadResponse proto.InternalMessageInfo

// UnsaveThreadRequest holds the id of the user which is unsaving the thread and the
// information about the thread to be removed from the user's saved thread list.
type UnsaveThreadRequest struct {
	UserId               string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thread               *context.Thread `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UnsaveThreadRequest) Reset()         { *m = UnsaveThreadRequest{} }
func (m *UnsaveThreadRequest) String() string { return proto.CompactTextString(m) }
func (*UnsaveThreadRequest) ProtoMessage()    {}
func (*UnsaveThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{37}
}

func (m *UnsaveThreadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsaveThreadRequest.Unmarshal(m, b)
}
func (m *UnsaveThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsaveThreadRequest.Marshal(b, m, deterministic)
}
func (m *UnsaveThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsaveThreadRequest.Merge(m, src)
}
func (m *UnsaveThreadRequest) XXX_Size() int {
	return xxx_messageInfo_UnsaveThreadRequest.Size(m)
}
func (m *UnsaveThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsaveThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnsaveThreadRequest proto.InternalMessageInfo

func (m *UnsaveThreadRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UnsaveThreadRequest) GetThread() *context.Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type UnsaveThreadResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnsaveThreadResponse) Reset()         { *m = UnsaveThreadResponse{} }
func (m *UnsaveThreadResponse) String() string { return proto.CompactTextString(m) }
func (*UnsaveThreadResponse) ProtoMessage()    {}
func (*UnsaveThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{38}
}

func (m *UnsaveThreadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsaveThreadResponse.Unmarshal(m, b)
}
func (m *UnsaveThreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsaveThreadResponse.Marshal(b, m, deterministic)
}
func (m *UnsaveThreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsaveThreadResponse.Merge(m, src)
}
func (m *UnsaveThreadResponse) XXX_Size() int {
	return xxx_messageInfo_UnsaveThreadResponse.Size(m)
}
func (m *UnsaveThreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsaveThreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnsaveThreadResponse proto.InternalMessageInfo

// ViewUsersRequest is a message for requesting either following or followers users
// data of a given user
type ViewUsersRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// context is either following or followers
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	// offset indicates how many users to ignore for pagination
	Offset               uint32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewUsersRequest) Reset()         { *m = ViewUsersRequest{} }
func (m *ViewUsersRequest) String() string { return proto.CompactTextString(m) }
func (*ViewUsersRequest) ProtoMessage()    {}
func (*ViewUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{39}
}

func (m *ViewUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewUsersRequest.Unmarshal(m, b)
}
func (m *ViewUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewUsersRequest.Marshal(b, m, deterministic)
}
func (m *ViewUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewUsersRequest.Merge(m, src)
}
func (m *ViewUsersRequest) XXX_Size() int {
	return xxx_messageInfo_ViewUsersRequest.Size(m)
}
func (m *ViewUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewUsersRequest proto.InternalMessageInfo

func (m *ViewUsersRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ViewUsersRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *ViewUsersRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ViewUsersResponse holds a list of basic user data of requested users following
// or followers of a user
type ViewUsersResponse struct {
	BasicUserData        []*dataformat.BasicUserData `protobuf:"bytes,1,rep,name=basic_user_data,json=basicUserData,proto3" json:"basic_user_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ViewUsersResponse) Reset()         { *m = ViewUsersResponse{} }
func (m *ViewUsersResponse) String() string { return proto.CompactTextString(m) }
func (*ViewUsersResponse) ProtoMessage()    {}
func (*ViewUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{40}
}

func (m *ViewUsersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewUsersResponse.Unmarshal(m, b)
}
func (m *ViewUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewUsersResponse.Marshal(b, m, deterministic)
}
func (m *ViewUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewUsersResponse.Merge(m, src)
}
func (m *ViewUsersResponse) XXX_Size() int {
	return xxx_messageInfo_ViewUsersResponse.Size(m)
}
func (m *ViewUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ViewUsersResponse proto.InternalMessageInfo

func (m *ViewUsersResponse) GetBasicUserData() []*dataformat.BasicUserData {
	if m != nil {
		return m.BasicUserData
	}
	return nil
}

// ViewUserByUsernameRequest is a message for requesting public data of a user
type ViewUserByUsernameRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewUserByUsernameRequest) Reset()         { *m = ViewUserByUsernameRequest{} }
func (m *ViewUserByUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*ViewUserByUsernameRequest) ProtoMessage()    {}
func (*ViewUserByUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{41}
}

func (m *ViewUserByUsernameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewUserByUsernameRequest.Unmarshal(m, b)
}
func (m *ViewUserByUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewUserByUsernameRequest.Marshal(b, m, deterministic)
}
func (m *ViewUserByUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewUserByUsernameRequest.Merge(m, src)
}
func (m *ViewUserByUsernameRequest) XXX_Size() int {
	return xxx_messageInfo_ViewUserByUsernameRequest.Size(m)
}
func (m *ViewUserByUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewUserByUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewUserByUsernameRequest proto.InternalMessageInfo

func (m *ViewUserByUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// ViewUserResponse holds some basic data of a requested user
type ViewUserResponse struct {
	Alias                string               `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Username             string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	PicUrl               string               `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	About                string               `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	UserId               string               `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LastTimeCreated      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_time_created,json=lastTimeCreated,proto3" json:"last_time_created,omitempty"`
	FollowersIds         []string             `protobuf:"bytes,7,rep,name=followers_ids,json=followersIds,proto3" json:"followers_ids,omitempty"`
	FollowingIds         []string             `protobuf:"bytes,8,rep,name=following_ids,json=followingIds,proto3" json:"following_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ViewUserResponse) Reset()         { *m = ViewUserResponse{} }
func (m *ViewUserResponse) String() string { return proto.CompactTextString(m) }
func (*ViewUserResponse) ProtoMessage()    {}
func (*ViewUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{42}
}

func (m *ViewUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewUserResponse.Unmarshal(m, b)
}
func (m *ViewUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewUserResponse.Marshal(b, m, deterministic)
}
func (m *ViewUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewUserResponse.Merge(m, src)
}
func (m *ViewUserResponse) XXX_Size() int {
	return xxx_messageInfo_ViewUserResponse.Size(m)
}
func (m *ViewUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ViewUserResponse proto.InternalMessageInfo

func (m *ViewUserResponse) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *ViewUserResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ViewUserResponse) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

func (m *ViewUserResponse) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ViewUserResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ViewUserResponse) GetLastTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.LastTimeCreated
	}
	return nil
}

func (m *ViewUserResponse) GetFollowersIds() []string {
	if m != nil {
		return m.FollowersIds
	}
	return nil
}

func (m *ViewUserResponse) GetFollowingIds() []string {
	if m != nil {
		return m.FollowingIds
	}
	return nil
}

// GetDashboardDataRequest holds the user id of the user to request the data for its
// dashboard.
type GetDashboardDataRequest struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDashboardDataRequest) Reset()         { *m = GetDashboardDataRequest{} }
func (m *GetDashboardDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetDashboardDataRequest) ProtoMessage()    {}
func (*GetDashboardDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{43}
}

func (m *GetDashboardDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDashboardDataRequest.Unmarshal(m, b)
}
func (m *GetDashboardDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDashboardDataRequest.Marshal(b, m, deterministic)
}
func (m *GetDashboardDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDashboardDataRequest.Merge(m, src)
}
func (m *GetDashboardDataRequest) XXX_Size() int {
	return xxx_messageInfo_GetDashboardDataRequest.Size(m)
}
func (m *GetDashboardDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDashboardDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDashboardDataRequest proto.InternalMessageInfo

func (m *GetDashboardDataRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// DashboardData holds the header data, the list of users this user is following,
// the list of users that are following this user. the num of threads saved by
// the user and the user id.
type DashboardData struct {
	UserHeaderData *UserHeaderData `protobuf:"bytes,1,opt,name=user_header_data,json=userHeaderData,proto3" json:"user_header_data,omitempty"`
	// ids of users that are following this user.
	FollowersIds []string `protobuf:"bytes,2,rep,name=followers_ids,json=followersIds,proto3" json:"followers_ids,omitempty"`
	// ids of users that this user is following.
	FollowingIds         []string `protobuf:"bytes,3,rep,name=following_ids,json=followingIds,proto3" json:"following_ids,omitempty"`
	SavedThreads         uint32   `protobuf:"varint,4,opt,name=saved_threads,json=savedThreads,proto3" json:"saved_threads,omitempty"`
	UserId               string   `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DashboardData) Reset()         { *m = DashboardData{} }
func (m *DashboardData) String() string { return proto.CompactTextString(m) }
func (*DashboardData) ProtoMessage()    {}
func (*DashboardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{44}
}

func (m *DashboardData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DashboardData.Unmarshal(m, b)
}
func (m *DashboardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DashboardData.Marshal(b, m, deterministic)
}
func (m *DashboardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashboardData.Merge(m, src)
}
func (m *DashboardData) XXX_Size() int {
	return xxx_messageInfo_DashboardData.Size(m)
}
func (m *DashboardData) XXX_DiscardUnknown() {
	xxx_messageInfo_DashboardData.DiscardUnknown(m)
}

var xxx_messageInfo_DashboardData proto.InternalMessageInfo

func (m *DashboardData) GetUserHeaderData() *UserHeaderData {
	if m != nil {
		return m.UserHeaderData
	}
	return nil
}

func (m *DashboardData) GetFollowersIds() []string {
	if m != nil {
		return m.FollowersIds
	}
	return nil
}

func (m *DashboardData) GetFollowingIds() []string {
	if m != nil {
		return m.FollowingIds
	}
	return nil
}

func (m *DashboardData) GetSavedThreads() uint32 {
	if m != nil {
		return m.SavedThreads
	}
	return 0
}

func (m *DashboardData) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// LoginRequest is a message for requesting the validation of a user's credentials
type LoginRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,150,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{45}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// LoginResponse holds the id of the user that just logged in
type LoginResponse struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{46}
}

func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponse.Unmarshal(m, b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return xxx_messageInfo_LoginResponse.Size(m)
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type RegisterUserRequest struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PicUrl               string   `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Alias                string   `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	About                string   `protobuf:"bytes,7,opt,name=about,proto3" json:"about,omitempty"`
	Password             string   `protobuf:"bytes,150,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterUserRequest) Reset()         { *m = RegisterUserRequest{} }
func (m *RegisterUserRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterUserRequest) ProtoMessage()    {}
func (*RegisterUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{47}
}

func (m *RegisterUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterUserRequest.Unmarshal(m, b)
}
func (m *RegisterUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterUserRequest.Marshal(b, m, deterministic)
}
func (m *RegisterUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserRequest.Merge(m, src)
}
func (m *RegisterUserRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterUserRequest.Size(m)
}
func (m *RegisterUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserRequest proto.InternalMessageInfo

func (m *RegisterUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterUserRequest) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

func (m *RegisterUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisterUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterUserRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *RegisterUserRequest) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *RegisterUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// RegisterUserResponse holds the id of the user that just signed in
type RegisterUserResponse struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterUserResponse) Reset()         { *m = RegisterUserResponse{} }
func (m *RegisterUserResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterUserResponse) ProtoMessage()    {}
func (*RegisterUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3591c2d7d53bb31, []int{48}
}

func (m *RegisterUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterUserResponse.Unmarshal(m, b)
}
func (m *RegisterUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterUserResponse.Marshal(b, m, deterministic)
}
func (m *RegisterUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterUserResponse.Merge(m, src)
}
func (m *RegisterUserResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterUserResponse.Size(m)
}
func (m *RegisterUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterUserResponse proto.InternalMessageInfo

func (m *RegisterUserResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*Content)(nil), "cheroapi.Content")
	proto.RegisterType((*ContentAuthor)(nil), "cheroapi.ContentAuthor")
	proto.RegisterType((*ContentMetadata)(nil), "cheroapi.ContentMetadata")
	proto.RegisterType((*ContentData)(nil), "cheroapi.ContentData")
	proto.RegisterType((*UserHeaderData)(nil), "cheroapi.UserHeaderData")
	proto.RegisterType((*NotifyUser)(nil), "cheroapi.NotifyUser")
	proto.RegisterType((*ContentPattern)(nil), "cheroapi.ContentPattern")
	proto.RegisterType((*GeneralPattern)(nil), "cheroapi.GeneralPattern")
	proto.RegisterMapType((map[string]*IdList)(nil), "cheroapi.GeneralPattern.DiscardIdsEntry")
	proto.RegisterType((*SavedPattern)(nil), "cheroapi.SavedPattern")
	proto.RegisterMapType((map[string]*IdList)(nil), "cheroapi.SavedPattern.DiscardIdsEntry")
	proto.RegisterType((*IdList)(nil), "cheroapi.IdList")
	proto.RegisterType((*ActivityPattern)(nil), "cheroapi.ActivityPattern")
	proto.RegisterMapType((map[string]*dataformat.Activity)(nil), "cheroapi.ActivityPattern.DiscardIdsEntry")
	proto.RegisterType((*UserList)(nil), "cheroapi.UserList")
	proto.RegisterType((*ContentRule)(nil), "cheroapi.ContentRule")
	proto.RegisterType((*UpvoteRequest)(nil), "cheroapi.UpvoteRequest")
	proto.RegisterType((*UndoUpvoteRequest)(nil), "cheroapi.UndoUpvoteRequest")
	proto.RegisterType((*UndoUpvoteResponse)(nil), "cheroapi.UndoUpvoteResponse")
	proto.RegisterType((*CommentRequest)(nil), "cheroapi.CommentRequest")
	proto.RegisterType((*UpdateContentRequest)(nil), "cheroapi.UpdateContentRequest")
	proto.RegisterType((*DeleteContentRequest)(nil), "cheroapi.DeleteContentRequest")
	proto.RegisterType((*DeleteContentResponse)(nil), "cheroapi.DeleteContentResponse")
	proto.RegisterType((*CreateThreadRequest)(nil), "cheroapi.CreateThreadRequest")
	proto.RegisterType((*CreateThreadResponse)(nil), "cheroapi.CreateThreadResponse")
	proto.RegisterType((*GetBasicUserDataRequest)(nil), "cheroapi.GetBasicUserDataRequest")
	proto.RegisterType((*UpdateBasicUserDataRequest)(nil), "cheroapi.UpdateBasicUserDataRequest")
	proto.RegisterType((*UpdateBasicUserDataResponse)(nil), "cheroapi.UpdateBasicUserDataResponse")
	proto.RegisterType((*GetThreadRequest)(nil), "cheroapi.GetThreadRequest")
	proto.RegisterType((*GetSubcommentsRequest)(nil), "cheroapi.GetSubcommentsRequest")
	proto.RegisterType((*ReadNotifsRequest)(nil), "cheroapi.ReadNotifsRequest")
	proto.RegisterType((*ReadNotifsResponse)(nil), "cheroapi.ReadNotifsResponse")
	proto.RegisterType((*ClearNotifsRequest)(nil), "cheroapi.ClearNotifsRequest")
	proto.RegisterType((*ClearNotifsResponse)(nil), "cheroapi.ClearNotifsResponse")
	proto.RegisterType((*FollowUserRequest)(nil), "cheroapi.FollowUserRequest")
	proto.RegisterType((*FollowUserResponse)(nil), "cheroapi.FollowUserResponse")
	proto.RegisterType((*UnfollowUserRequest)(nil), "cheroapi.UnfollowUserRequest")
	proto.RegisterType((*UnfollowUserResponse)(nil), "cheroapi.UnfollowUserResponse")
	proto.RegisterType((*SaveThreadRequest)(nil), "cheroapi.SaveThreadRequest")
	proto.RegisterType((*SaveThreadResponse)(nil), "cheroapi.SaveThreadResponse")
	proto.RegisterType((*UnsaveThreadRequest)(nil), "cheroapi.UnsaveThreadRequest")
	proto.RegisterType((*UnsaveThreadResponse)(nil), "cheroapi.UnsaveThreadResponse")
	proto.RegisterType((*ViewUsersRequest)(nil), "cheroapi.ViewUsersRequest")
	proto.RegisterType((*ViewUsersResponse)(nil), "cheroapi.ViewUsersResponse")
	proto.RegisterType((*ViewUserByUsernameRequest)(nil), "cheroapi.ViewUserByUsernameRequest")
	proto.RegisterType((*ViewUserResponse)(nil), "cheroapi.ViewUserResponse")
	proto.RegisterType((*GetDashboardDataRequest)(nil), "cheroapi.GetDashboardDataRequest")
	proto.RegisterType((*DashboardData)(nil), "cheroapi.DashboardData")
	proto.RegisterType((*LoginRequest)(nil), "cheroapi.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "cheroapi.LoginResponse")
	proto.RegisterType((*RegisterUserRequest)(nil), "cheroapi.RegisterUserRequest")
	proto.RegisterType((*RegisterUserResponse)(nil), "cheroapi.RegisterUserResponse")
}

func init() {
	proto.RegisterFile("cheroapi.proto", fileDescriptor_b3591c2d7d53bb31)
}

var fileDescriptor_b3591c2d7d53bb31 = []byte{
	// 2158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x5b, 0x73, 0x23, 0x47,
	0x15, 0xd6, 0x48, 0x96, 0x6c, 0x1f, 0x5d, 0x6c, 0xb5, 0xb5, 0x6b, 0xed, 0x78, 0x37, 0x6b, 0x26,
	0xc9, 0xe2, 0x6c, 0x12, 0x3b, 0xab, 0x10, 0xa0, 0x12, 0x52, 0x85, 0x2f, 0xf1, 0x85, 0xda, 0x5c,
	0x98, 0x5d, 0x67, 0x29, 0x0a, 0x4a, 0x35, 0xd2, 0xb4, 0xa4, 0xa9, 0x1d, 0x69, 0xc4, 0x74, 0xcb,
	0x6b, 0xff, 0x89, 0x54, 0xf1, 0x00, 0x8f, 0x3c, 0x50, 0xc5, 0x6f, 0xe0, 0x57, 0xf0, 0x0b, 0xa8,
	0x02, 0x1e, 0xa8, 0xe2, 0x95, 0x07, 0xe0, 0x99, 0xea, 0xcb, 0xcc, 0x74, 0x6b, 0x46, 0xb2, 0x8c,
	0xe1, 0x81, 0x7d, 0x9b, 0xee, 0x3e, 0x7d, 0xfa, 0x9c, 0xd3, 0xdf, 0x39, 0xf3, 0xf5, 0x81, 0x5a,
	0x77, 0x80, 0xc3, 0xc0, 0x19, 0x7b, 0xbb, 0xe3, 0x30, 0xa0, 0x01, 0x5a, 0x89, 0xc6, 0xe6, 0xc3,
	0x7e, 0x10, 0xf4, 0x7d, 0xbc, 0xc7, 0xe7, 0x3b, 0x93, 0xde, 0x1e, 0xf5, 0x86, 0x98, 0x50, 0x67,
	0x38, 0x16, 0xa2, 0x66, 0xdd, 0x75, 0xa8, 0xd3, 0xee, 0x05, 0xe1, 0xd0, 0xa1, 0x72, 0xaa, 0xda,
	0x0d, 0x46, 0x14, 0x5f, 0x46, 0xc3, 0xda, 0x10, 0x53, 0x87, 0x49, 0x89, 0xb1, 0xf5, 0x4b, 0x03,
	0x96, 0x0f, 0x99, 0xc4, 0x88, 0xa2, 0x06, 0x14, 0xa9, 0x47, 0x7d, 0xdc, 0x34, 0xb6, 0x8d, 0x9d,
	0x55, 0x5b, 0x0c, 0x50, 0x13, 0x96, 0xbb, 0x42, 0xa0, 0x99, 0xe7, 0xf3, 0xd1, 0x10, 0x6d, 0xc2,
	0x72, 0x8f, 0xb6, 0x7b, 0x9e, 0x8f, 0x9b, 0x05, 0xbe, 0x52, 0xea, 0xd1, 0x63, 0xcf, 0xc7, 0xe8,
	0x53, 0xa8, 0x8c, 0x27, 0x1d, 0xdf, 0x23, 0x83, 0xb6, 0xeb, 0x50, 0xdc, 0x5c, 0xda, 0x36, 0x76,
	0xca, 0x2d, 0x73, 0x57, 0x98, 0xbf, 0x1b, 0x99, 0xbf, 0xfb, 0x3c, 0x32, 0xdf, 0x2e, 0x4b, 0xf9,
	0x23, 0x87, 0x62, 0xeb, 0xc7, 0x50, 0x95, 0x26, 0xed, 0x4f, 0xe8, 0x20, 0x08, 0x51, 0x0d, 0xf2,
	0x9e, 0x2b, 0xad, 0xca, 0x7b, 0x2e, 0x32, 0x61, 0x65, 0x42, 0x70, 0x38, 0x72, 0x86, 0x58, 0xda,
	0x14, 0x8f, 0x99, 0x13, 0x8e, 0xef, 0x39, 0x44, 0x9a, 0x24, 0x06, 0xd6, 0x3f, 0x0d, 0x58, 0x93,
	0x3a, 0x3f, 0x97, 0x01, 0x48, 0x69, 0x6d, 0xc2, 0x32, 0xc1, 0x5d, 0xea, 0x05, 0xa3, 0xc8, 0x51,
	0x39, 0x44, 0xf7, 0x61, 0x75, 0x8c, 0xc3, 0xa1, 0xe3, 0x7b, 0xa3, 0x97, 0x52, 0x6f, 0x32, 0xc1,
	0xac, 0xa1, 0xc1, 0xf8, 0x22, 0xa0, 0x98, 0x70, 0x4f, 0xab, 0x76, 0x3c, 0x66, 0x3a, 0x43, 0x3c,
	0xf6, 0x3d, 0x4c, 0x9a, 0x45, 0xbe, 0x14, 0x0d, 0xd1, 0x16, 0xac, 0x32, 0x91, 0xb0, 0xed, 0xb9,
	0xa4, 0x59, 0xda, 0x2e, 0x30, 0x27, 0xf8, 0xc4, 0x99, 0x4b, 0xd0, 0x43, 0x28, 0x0b, 0x39, 0xb1,
	0xbc, 0xcc, 0x97, 0x41, 0x4e, 0x31, 0x81, 0x47, 0xb0, 0xc6, 0x3c, 0x26, 0xed, 0x57, 0x83, 0xa0,
	0x4d, 0x9c, 0x0b, 0xec, 0x36, 0x57, 0xb8, 0x50, 0x95, 0x4f, 0xbf, 0x18, 0x04, 0xcf, 0xd8, 0xa4,
	0xf5, 0x5b, 0x03, 0xca, 0xd2, 0xef, 0x23, 0xe6, 0xf3, 0x1e, 0x94, 0x1c, 0x1e, 0x53, 0xee, 0x77,
	0xb9, 0xb5, 0xb9, 0x1b, 0x83, 0x4d, 0x0b, 0xb9, 0x2d, 0xc5, 0xd0, 0xbb, 0xfa, 0xed, 0x97, 0x5b,
	0xf5, 0xd4, 0x8e, 0x04, 0x10, 0x1f, 0xc1, 0x4a, 0x04, 0x2f, 0x1e, 0xa6, 0x72, 0xeb, 0x5e, 0x4a,
	0x3a, 0x0a, 0xbf, 0x1d, 0x8b, 0x5a, 0xff, 0x32, 0xa0, 0x76, 0x4e, 0x70, 0x78, 0x8a, 0x1d, 0x17,
	0x87, 0xdc, 0xce, 0xf8, 0x16, 0x0d, 0xe5, 0x16, 0xe7, 0xde, 0xfb, 0x77, 0xa1, 0x3a, 0x19, 0x85,
	0xd8, 0x71, 0xdb, 0xa3, 0x80, 0x7a, 0x3d, 0x76, 0xff, 0x05, 0x6e, 0x2e, 0x3b, 0x42, 0x66, 0xc4,
	0x17, 0x6c, 0xc5, 0xae, 0x08, 0x39, 0x3e, 0x20, 0xa8, 0xc5, 0x42, 0x9d, 0xec, 0x5a, 0x9a, 0xb5,
	0x0b, 0x94, 0x3d, 0xc7, 0x50, 0xf7, 0x1d, 0x42, 0xdb, 0x2c, 0xfd, 0xda, 0xdd, 0x10, 0x3b, 0x14,
	0xbb, 0xfc, 0x7e, 0xe7, 0x83, 0x7c, 0x8d, 0x6d, 0x62, 0xc3, 0x43, 0xb1, 0xc5, 0xfa, 0x19, 0x00,
	0xd7, 0x78, 0xc5, 0xbc, 0x67, 0xe9, 0xc4, 0xbc, 0x69, 0xc7, 0xa0, 0x2c, 0xb1, 0xe1, 0x99, 0x8b,
	0x3e, 0x82, 0x0a, 0xb7, 0xce, 0xeb, 0x3a, 0x31, 0x3a, 0xb3, 0x3d, 0x53, 0xc5, 0xac, 0x3f, 0x19,
	0x50, 0x93, 0x41, 0xff, 0xca, 0xa1, 0x14, 0x87, 0x23, 0xf4, 0x04, 0x96, 0xc7, 0xe2, 0xb3, 0x69,
	0x6c, 0x17, 0x76, 0x6a, 0xad, 0xcd, 0xdd, 0xb8, 0x1e, 0x48, 0xd1, 0x67, 0xd4, 0xa1, 0x13, 0x62,
	0x47, 0x72, 0x0c, 0x8a, 0xae, 0x47, 0xba, 0x4e, 0xe8, 0x72, 0x28, 0xe6, 0x05, 0x14, 0xe5, 0x14,
	0x83, 0xe2, 0x87, 0x50, 0x96, 0x79, 0xd2, 0xee, 0xd2, 0x4b, 0x79, 0xef, 0xeb, 0xbb, 0x51, 0xd9,
	0x79, 0x26, 0xd6, 0x4e, 0x73, 0x36, 0x48, 0xb1, 0x43, 0x7a, 0x89, 0x3e, 0x00, 0xa0, 0x03, 0x1e,
	0x77, 0xb6, 0x47, 0xd4, 0x87, 0xb5, 0x78, 0xcf, 0x73, 0xbe, 0x74, 0x9a, 0xb3, 0x57, 0x85, 0xd0,
	0x21, 0xbd, 0x3c, 0xa8, 0xc3, 0x9a, 0x84, 0x59, 0x5b, 0x8a, 0x59, 0x7f, 0x36, 0xa0, 0x76, 0x82,
	0x47, 0x38, 0x74, 0xfc, 0x5b, 0x38, 0x78, 0x96, 0x76, 0xb0, 0xdc, 0xda, 0x49, 0x70, 0xab, 0x9f,
	0xb0, 0x7b, 0x14, 0x7b, 0xfe, 0xd9, 0x88, 0x86, 0x57, 0x6a, 0x28, 0xcc, 0x2f, 0x61, 0x6d, 0x6a,
	0x19, 0xad, 0x43, 0xe1, 0x25, 0xbe, 0x92, 0x17, 0xca, 0x3e, 0xd1, 0x23, 0x28, 0x5e, 0x38, 0xfe,
	0x04, 0xcb, 0x6b, 0x5c, 0x4f, 0x4e, 0x3a, 0x73, 0x9f, 0x7a, 0x84, 0xda, 0x62, 0xf9, 0xe3, 0xfc,
	0xf7, 0x0d, 0xeb, 0x1f, 0x06, 0x54, 0x78, 0x22, 0xdf, 0xc2, 0xbf, 0x93, 0x2c, 0xff, 0x1e, 0x25,
	0xa7, 0xaa, 0xfa, 0xe7, 0x79, 0xa7, 0xe2, 0xb3, 0xa0, 0xe2, 0xf3, 0xbf, 0xef, 0xb6, 0x09, 0x25,
	0x31, 0xc9, 0xf4, 0x30, 0xa3, 0x0d, 0x8e, 0x3a, 0xf6, 0x69, 0xfd, 0x3e, 0x0f, 0x6b, 0xfb, 0x5d,
	0xea, 0x5d, 0x78, 0xf4, 0xea, 0x16, 0x51, 0xf9, 0x51, 0x56, 0x54, 0xde, 0x49, 0x8c, 0x9a, 0x3a,
	0x62, 0x6e, 0x60, 0x1e, 0x43, 0x91, 0x57, 0x5d, 0x89, 0x7d, 0x94, 0x68, 0x61, 0x79, 0xcd, 0xfc,
	0x38, 0xcd, 0xd9, 0x42, 0x04, 0xdd, 0x4b, 0x82, 0xc8, 0x50, 0xbf, 0x7a, 0x9a, 0x8b, 0xc3, 0xf8,
	0x6c, 0x91, 0x30, 0x3e, 0xd6, 0xc3, 0xd8, 0x50, 0x8b, 0x40, 0x64, 0xb3, 0x12, 0xca, 0x83, 0x55,
	0x59, 0xbf, 0x2f, 0xa9, 0x75, 0x1f, 0x56, 0x22, 0x7b, 0x32, 0xe2, 0xfa, 0xf7, 0xe4, 0x4f, 0x61,
	0x4f, 0x7c, 0x8c, 0xde, 0x81, 0x25, 0x5e, 0xc7, 0xc5, 0x7f, 0xe2, 0x4e, 0xaa, 0x8e, 0xb3, 0x32,
	0x6d, 0x73, 0x91, 0xa9, 0x64, 0xce, 0x5f, 0x9f, 0xcc, 0xac, 0x66, 0x74, 0x83, 0xe1, 0x90, 0x27,
	0x73, 0x46, 0xcd, 0x38, 0x14, 0x6b, 0xac, 0x66, 0x48, 0x31, 0xb6, 0xe9, 0x07, 0x50, 0x23, 0x93,
	0x8e, 0xba, 0x4f, 0xd4, 0x8d, 0x8d, 0xa4, 0xd6, 0xc4, 0xcb, 0xa7, 0x39, 0xbb, 0x9a, 0x08, 0xcf,
	0xa8, 0x1f, 0x7f, 0x31, 0xa0, 0x7a, 0xce, 0x7f, 0xd4, 0x36, 0xfe, 0xc5, 0x04, 0x13, 0x3a, 0xbb,
	0x04, 0xff, 0xbf, 0xba, 0xf8, 0x57, 0x03, 0xea, 0xe7, 0x23, 0x37, 0x78, 0xcd, 0xdd, 0x6c, 0x00,
	0x52, 0xbd, 0x24, 0xe3, 0x60, 0x44, 0xb0, 0xf5, 0xab, 0x3c, 0xfb, 0x01, 0xf2, 0x7d, 0x91, 0xe7,
	0x0a, 0x99, 0x35, 0x66, 0x92, 0xd9, 0xbc, 0x46, 0x66, 0x67, 0x95, 0xbd, 0x5b, 0xb2, 0xdc, 0xa9,
	0x58, 0x17, 0x6f, 0x1e, 0xeb, 0xd2, 0x22, 0xb1, 0xce, 0x8a, 0xd6, 0x37, 0x79, 0x68, 0x9c, 0x8f,
	0x99, 0xcd, 0x51, 0xc2, 0xcb, 0xe8, 0xbc, 0xad, 0xe5, 0x7c, 0x06, 0xd3, 0x13, 0xf9, 0xae, 0x44,
	0x24, 0x3f, 0x07, 0x3e, 0x85, 0x9b, 0xbb, 0xb4, 0xf4, 0x1f, 0xc2, 0xa7, 0x78, 0x3b, 0xf8, 0xfc,
	0xcd, 0x80, 0xc6, 0x11, 0xf6, 0x71, 0x2a, 0x20, 0xaf, 0x5d, 0xa2, 0x6c, 0xc2, 0x9d, 0x29, 0x47,
	0x65, 0xae, 0x7c, 0x63, 0xc0, 0x86, 0xa0, 0xa5, 0xc2, 0xf8, 0x28, 0x02, 0xef, 0xea, 0x09, 0x33,
	0x9f, 0xff, 0x3f, 0xd1, 0xa9, 0x60, 0x3e, 0x9b, 0x0a, 0x6a, 0x44, 0x70, 0x56, 0x76, 0x59, 0xdf,
	0x81, 0x86, 0x6e, 0x8f, 0x30, 0x54, 0x7f, 0x8b, 0x19, 0x53, 0x6f, 0x31, 0xab, 0x05, 0x9b, 0x27,
	0x98, 0x1e, 0x38, 0xc4, 0xeb, 0xb2, 0x7f, 0x1d, 0xff, 0x49, 0x5d, 0x73, 0x97, 0xec, 0x8d, 0x64,
	0x8a, 0x74, 0xb8, 0xd1, 0xbe, 0xb9, 0xaf, 0x91, 0x6d, 0x28, 0xbb, 0x98, 0x74, 0x43, 0x6f, 0xcc,
	0x19, 0xbb, 0x70, 0x4d, 0x9d, 0x62, 0x6a, 0xc7, 0x5e, 0xb7, 0x3d, 0x09, 0x7d, 0x41, 0x04, 0xec,
	0xd2, 0xd8, 0xeb, 0x9e, 0x87, 0x7e, 0xf2, 0xf4, 0x29, 0xaa, 0x0f, 0xd8, 0x07, 0xb0, 0x95, 0x69,
	0xa3, 0xbc, 0xbe, 0x4f, 0x60, 0xfd, 0x04, 0x53, 0xfd, 0xea, 0xbe, 0x0d, 0x25, 0x01, 0x3f, 0x79,
	0x73, 0xd3, 0xf8, 0xb4, 0xe5, 0xb2, 0xd5, 0x81, 0x3b, 0x27, 0x98, 0x26, 0x48, 0x22, 0x91, 0x86,
	0x27, 0x3a, 0x66, 0x8d, 0x6c, 0xcc, 0x6a, 0x88, 0xbd, 0x0b, 0xa5, 0xa0, 0xd7, 0x23, 0x58, 0x3c,
	0x17, 0xab, 0xb6, 0x1c, 0x59, 0xef, 0x41, 0xdd, 0x8e, 0x1f, 0x50, 0xd7, 0x5e, 0x49, 0x03, 0x90,
	0x2a, 0x2d, 0x9d, 0x7c, 0x1f, 0xd0, 0xa1, 0x8f, 0x9d, 0x70, 0x41, 0x25, 0x77, 0x60, 0x43, 0x13,
	0x97, 0x5a, 0x6c, 0xa8, 0x1f, 0x07, 0xbe, 0x1f, 0xbc, 0x62, 0x41, 0xbc, 0xf6, 0x92, 0xdf, 0x82,
	0x1a, 0x5f, 0xa0, 0x41, 0xbb, 0xc7, 0x77, 0xc9, 0xab, 0xae, 0xb0, 0xd9, 0xe7, 0x81, 0xd0, 0xc4,
	0xec, 0x55, 0x75, 0xca, 0x93, 0x7e, 0x02, 0x1b, 0xe7, 0xa3, 0xde, 0xe2, 0x67, 0xed, 0xc0, 0x7a,
	0x74, 0xd6, 0x64, 0xa4, 0x9d, 0x56, 0x13, 0xa7, 0x45, 0xda, 0xac, 0xbb, 0xd0, 0xd0, 0x35, 0xcb,
	0x13, 0xcf, 0xa1, 0xce, 0xe8, 0xbc, 0x8e, 0x83, 0x99, 0xe7, 0x25, 0x00, 0xc9, 0xcf, 0x07, 0x48,
	0x03, 0x90, 0xaa, 0x56, 0x1e, 0xf6, 0x82, 0xb9, 0x47, 0xfe, 0x07, 0xc7, 0x71, 0xef, 0x48, 0xfa,
	0xc0, 0x9f, 0xc3, 0xfa, 0xd7, 0x1e, 0xe6, 0x1e, 0x5f, 0x7b, 0xfb, 0xf1, 0x9f, 0xfe, 0x52, 0x6f,
	0x5b, 0x5d, 0x52, 0x05, 0xa2, 0x05, 0x0d, 0xa2, 0x5f, 0x43, 0x5d, 0x51, 0x2f, 0xcb, 0xcd, 0x3e,
	0xac, 0x75, 0x58, 0xc6, 0xb5, 0xf9, 0x29, 0xf2, 0xef, 0x58, 0xe0, 0x9d, 0x0d, 0x85, 0x79, 0xeb,
	0x49, 0x59, 0xed, 0xa8, 0x43, 0xeb, 0x7b, 0x70, 0x2f, 0xd2, 0x7b, 0xc0, 0x5f, 0xfa, 0xac, 0x42,
	0x44, 0xf6, 0xab, 0x45, 0xc4, 0xd0, 0x8b, 0x88, 0xf5, 0x9b, 0x7c, 0xe2, 0x70, 0x6c, 0xd0, 0xcd,
	0x3b, 0x23, 0x4a, 0xa5, 0x29, 0xa4, 0x2a, 0x4d, 0x27, 0x98, 0x50, 0x59, 0x80, 0xc4, 0x40, 0x8d,
	0x68, 0x51, 0x8b, 0x68, 0x66, 0xd7, 0xa3, 0x74, 0xe3, 0xae, 0x07, 0x7a, 0x13, 0xaa, 0x02, 0xba,
	0x38, 0x24, 0x4a, 0x7b, 0xab, 0x12, 0x4f, 0xb2, 0x37, 0x55, 0x2c, 0xe4, 0x8d, 0xfa, 0x5c, 0x68,
	0x45, 0x15, 0xf2, 0x46, 0xfd, 0x33, 0x97, 0xc8, 0x6a, 0x7f, 0xe4, 0x90, 0x41, 0x27, 0x70, 0x42,
	0x77, 0xa1, 0x6a, 0xff, 0x47, 0x03, 0xaa, 0xda, 0x0e, 0x74, 0x20, 0xd3, 0x6e, 0xc0, 0xdb, 0x4f,
	0x6d, 0x85, 0x01, 0x35, 0xf5, 0x97, 0x5c, 0xd2, 0x9f, 0x12, 0x09, 0xa9, 0xf4, 0xab, 0x52, 0x3e,
	0xe5, 0x17, 0xf1, 0xa9, 0x90, 0xf6, 0x89, 0x09, 0xf1, 0x7e, 0x5e, 0x5b, 0x24, 0x43, 0xd4, 0x52,
	0xac, 0xf0, 0x49, 0x91, 0x10, 0x64, 0xe6, 0x1d, 0x59, 0x27, 0x50, 0x79, 0x1a, 0xf4, 0xbd, 0xd1,
	0x02, 0xf0, 0x42, 0x5b, 0xb0, 0x32, 0x76, 0x08, 0x79, 0x15, 0x84, 0x6e, 0xf3, 0xd7, 0x72, 0x31,
	0x9a, 0xb0, 0x76, 0xa0, 0x2a, 0x15, 0x49, 0xdc, 0xcd, 0x0c, 0xe8, 0x1f, 0x0c, 0xd8, 0xb0, 0x71,
	0xdf, 0x23, 0x14, 0x87, 0x6a, 0x99, 0x6b, 0x40, 0x11, 0x0f, 0x1d, 0xcf, 0x8f, 0x80, 0xca, 0x07,
	0x08, 0xc1, 0x92, 0x02, 0xd2, 0xa5, 0xf9, 0x00, 0x15, 0x1d, 0xda, 0xa5, 0xcc, 0xbe, 0x6f, 0x71,
	0x56, 0xdf, 0xb7, 0xa4, 0xe6, 0x45, 0x0c, 0xf1, 0x65, 0x15, 0xe2, 0x73, 0x3d, 0xdf, 0x83, 0x86,
	0xee, 0xce, 0x35, 0x01, 0x68, 0xfd, 0x6e, 0x1d, 0xd6, 0x0f, 0xc3, 0x89, 0x7b, 0xc8, 0xb0, 0x32,
	0x76, 0xa8, 0xe7, 0xfb, 0x0e, 0xfa, 0x0c, 0x6a, 0x36, 0xee, 0x5e, 0x75, 0xfd, 0x88, 0x69, 0xa1,
	0x66, 0x8a, 0x38, 0xc9, 0xde, 0x82, 0x99, 0x7e, 0x5c, 0xb3, 0x17, 0xb8, 0x95, 0xfb, 0xc0, 0x50,
	0xd4, 0xc8, 0x36, 0x94, 0xaa, 0x46, 0xef, 0x4c, 0xcd, 0x53, 0x73, 0x02, 0x6b, 0x52, 0x4d, 0xd4,
	0x23, 0x40, 0xf7, 0x66, 0xf6, 0x3a, 0xe6, 0x29, 0xda, 0x87, 0x8a, 0x54, 0xc4, 0xdb, 0x46, 0xe8,
	0x6e, 0x76, 0x1f, 0x69, 0x9e, 0x8a, 0x4f, 0xa0, 0x24, 0xde, 0x69, 0x48, 0x69, 0x3e, 0x6b, 0xef,
	0x53, 0xb3, 0x91, 0x2c, 0x24, 0xfd, 0x51, 0xbe, 0xf9, 0x0c, 0x20, 0x79, 0xe8, 0xa1, 0x2d, 0x45,
	0xc1, 0xf4, 0x23, 0xd7, 0xbc, 0x9f, 0xbd, 0x28, 0xff, 0x25, 0x39, 0xf4, 0x29, 0x2c, 0x4b, 0x02,
	0xa3, 0x5f, 0x8d, 0xfa, 0x5e, 0x9c, 0x6b, 0x49, 0x55, 0x7b, 0x43, 0xa1, 0x37, 0x54, 0x6f, 0xd2,
	0x8f, 0xab, 0x39, 0xaa, 0x6c, 0xa8, 0x6a, 0xa4, 0x5c, 0x55, 0x95, 0xf5, 0x2c, 0x31, 0x1f, 0xce,
	0x5c, 0x8f, 0xbd, 0xfb, 0x12, 0x2a, 0x2a, 0x7d, 0x46, 0x0f, 0x14, 0x17, 0xd3, 0x34, 0xdf, 0x7c,
	0x63, 0xd6, 0x72, 0xac, 0xd0, 0x86, 0xfa, 0x09, 0xa6, 0x53, 0x6d, 0xfa, 0x6f, 0xa9, 0x60, 0xcc,
	0xa4, 0xdd, 0xe6, 0xcc, 0x1a, 0x6a, 0xe5, 0x90, 0x0b, 0x1b, 0x19, 0xa4, 0x16, 0xbd, 0x35, 0x1d,
	0xc9, 0x4c, 0xc5, 0x6f, 0x5f, 0x23, 0xa5, 0x58, 0xbe, 0x3e, 0x6d, 0xdc, 0x22, 0x86, 0xcf, 0xfe,
	0xc1, 0x5b, 0x39, 0xf4, 0x05, 0x6c, 0xc8, 0x68, 0x1c, 0xab, 0xc5, 0x7b, 0x01, 0xb5, 0x19, 0xdd,
	0x41, 0x2b, 0x87, 0x7e, 0x08, 0xab, 0x31, 0x7f, 0x47, 0xa6, 0xa6, 0x45, 0xbf, 0xa8, 0xec, 0x46,
	0x9c, 0x95, 0x43, 0x4f, 0xa1, 0xa6, 0x93, 0x78, 0xf4, 0x50, 0x53, 0x93, 0xa6, 0xf7, 0xf3, 0x92,
	0xf4, 0x29, 0x54, 0x3f, 0x77, 0xc2, 0x97, 0xfb, 0xbe, 0xbf, 0x4f, 0x18, 0x13, 0x57, 0x53, 0x2d,
	0xc5, 0xe3, 0xd5, 0x54, 0xcb, 0xa0, 0xed, 0xcc, 0xb6, 0xb2, 0xc2, 0xc4, 0x91, 0x22, 0x9e, 0xe6,
	0xf3, 0xe6, 0x83, 0x19, 0xab, 0xb1, 0xb6, 0x33, 0x80, 0x84, 0x6c, 0xab, 0x86, 0xa5, 0x68, 0xbd,
	0x6a, 0x58, 0x06, 0x3f, 0xe7, 0x59, 0xa2, 0xf2, 0x68, 0x35, 0x4b, 0x32, 0x98, 0xbb, 0x9a, 0x25,
	0x99, 0xf4, 0x9b, 0xdb, 0x96, 0x30, 0x65, 0xd5, 0xb6, 0x14, 0x2d, 0x57, 0x6d, 0xcb, 0x20, 0xd7,
	0xd2, 0xb6, 0x84, 0x05, 0xeb, 0xb6, 0xa5, 0x68, 0xb7, 0x6e, 0x1b, 0xc9, 0x52, 0x78, 0x0c, 0xab,
	0x31, 0xbf, 0x55, 0x31, 0x36, 0xcd, 0xa9, 0xcd, 0xad, 0xcc, 0xb5, 0x58, 0xcf, 0x0b, 0x40, 0x69,
	0x3e, 0x8b, 0xde, 0x4c, 0x6f, 0x4a, 0xb1, 0x5d, 0x33, 0xe3, 0x54, 0x45, 0xf1, 0x57, 0x3c, 0x51,
	0x75, 0x72, 0xa6, 0x67, 0x54, 0x16, 0xd5, 0x33, 0x95, 0xdf, 0x88, 0xb6, 0x6e, 0xe5, 0xd0, 0xc7,
	0x50, 0xe4, 0x2c, 0x46, 0xfd, 0x4f, 0xa9, 0xfc, 0x48, 0xdd, 0xab, 0xd1, 0x1d, 0x11, 0x7f, 0x95,
	0x07, 0xa8, 0xf1, 0xcf, 0xa0, 0x3b, 0x6a, 0xfc, 0xb3, 0xe8, 0x83, 0x95, 0x3b, 0x78, 0xef, 0xa7,
	0x8f, 0xfb, 0x1e, 0x1d, 0x4c, 0x3a, 0xbb, 0xdd, 0x60, 0xb8, 0xe7, 0x4f, 0x3c, 0xd2, 0x9f, 0x5c,
	0xe0, 0x3d, 0xbe, 0x8d, 0xf3, 0xe6, 0xf7, 0xfb, 0xc1, 0x5e, 0xa4, 0xa4, 0x53, 0xe2, 0x53, 0x1f,
	0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xdc, 0x21, 0x11, 0x0e, 0x20, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context1.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrudCheropatillaClient is the client API for CrudCheropatilla service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrudCheropatillaClient interface {
	// Get new feed of either threads in a section or comments in a thread.
	//
	// In case of being called in the context of a section, it returns only
	// threads that are currently active, as opposed to comments in a thread,
	// in which case the type of content is considered always active, despite
	// the current status of the thread they belong to.
	//
	// It may return a codes.InvalidArgument error in case of being passed a
	// request with a nil ContentContext or a codes.Internal error in case of
	// a database querying or network issue.
	RecycleContent(ctx context1.Context, in *ContentPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleContentClient, error)
	// Get new feed of threads in general (from multiple sections)
	RecycleGeneral(ctx context1.Context, in *GeneralPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleGeneralClient, error)
	// Get new activity from either multiple users or a single user.
	RecycleActivity(ctx context1.Context, in *ActivityPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleActivityClient, error)
	// Get new feed of saved threads of a user
	RecycleSaved(ctx context1.Context, in *SavedPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleSavedClient, error)
	// Post upvote on thread, comment or subcomment
	Upvote(ctx context1.Context, in *UpvoteRequest, opts ...grpc.CallOption) (CrudCheropatilla_UpvoteClient, error)
	// Undo upvote on a thread, comment or subcomment
	UndoUpvote(ctx context1.Context, in *UndoUpvoteRequest, opts ...grpc.CallOption) (*UndoUpvoteResponse, error)
	// Post comment on a thread or in a comment
	Comment(ctx context1.Context, in *CommentRequest, opts ...grpc.CallOption) (CrudCheropatilla_CommentClient, error)
	// Update a thread, comment or subcomment
	UpdateContent(ctx context1.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (CrudCheropatilla_UpdateContentClient, error)
	// Delete a thread, comment or subcomment
	DeleteContent(ctx context1.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*DeleteContentResponse, error)
	// Post a thread to create
	CreateThread(ctx context1.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	// Get a user's basic data to be displayed in the header navigation section
	GetUserHeaderData(ctx context1.Context, in *GetBasicUserDataRequest, opts ...grpc.CallOption) (*UserHeaderData, error)
	// Update a user's basic data
	UpdateBasicUserData(ctx context1.Context, in *UpdateBasicUserDataRequest, opts ...grpc.CallOption) (*UpdateBasicUserDataResponse, error)
	// Get a user's basic data to be dislayed in page
	GetBasicUserData(ctx context1.Context, in *GetBasicUserDataRequest, opts ...grpc.CallOption) (*dataformat.BasicUserData, error)
	// Get the list of users followed by a given user
	GetUserFollowingIds(ctx context1.Context, in *GetBasicUserDataRequest, opts ...grpc.CallOption) (*UserList, error)
	// Get a single thread
	GetThread(ctx context1.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ContentData, error)
	// Get a comment's comments
	GetSubcomments(ctx context1.Context, in *GetSubcommentsRequest, opts ...grpc.CallOption) (CrudCheropatilla_GetSubcommentsClient, error)
	// Mark unread notifications as read
	MarkAllAsRead(ctx context1.Context, in *ReadNotifsRequest, opts ...grpc.CallOption) (*ReadNotifsResponse, error)
	// Clear all the notifications
	ClearNotifs(ctx context1.Context, in *ClearNotifsRequest, opts ...grpc.CallOption) (*ClearNotifsResponse, error)
	// Follow a user
	FollowUser(ctx context1.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	// Unfollow a user
	UnfollowUser(ctx context1.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
	// Request to save thread
	SaveThread(ctx context1.Context, in *SaveThreadRequest, opts ...grpc.CallOption) (*SaveThreadResponse, error)
	// Request to remove thread from user's list of saved threads
	UnsaveThread(ctx context1.Context, in *UnsaveThreadRequest, opts ...grpc.CallOption) (*UnsaveThreadResponse, error)
	// Get either following or followers users' basic data
	ViewUsers(ctx context1.Context, in *ViewUsersRequest, opts ...grpc.CallOption) (*ViewUsersResponse, error)
	// Get username basic data, following, followers and threads created
	ViewUserByUsername(ctx context1.Context, in *ViewUserByUsernameRequest, opts ...grpc.CallOption) (*ViewUserResponse, error)
	// Get dashboard data for a given user
	GetDashboardData(ctx context1.Context, in *GetDashboardDataRequest, opts ...grpc.CallOption) (*DashboardData, error)
	// Validate user credentials to login
	Login(ctx context1.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Register new user
	RegisterUser(ctx context1.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
}

type crudCheropatillaClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudCheropatillaClient(cc grpc.ClientConnInterface) CrudCheropatillaClient {
	return &crudCheropatillaClient{cc}
}

func (c *crudCheropatillaClient) RecycleContent(ctx context1.Context, in *ContentPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[0], "/cheroapi.CrudCheropatilla/RecycleContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleContentClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleContentClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleContentClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) RecycleGeneral(ctx context1.Context, in *GeneralPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleGeneralClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[1], "/cheroapi.CrudCheropatilla/RecycleGeneral", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleGeneralClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleGeneralClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleGeneralClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleGeneralClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) RecycleActivity(ctx context1.Context, in *ActivityPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[2], "/cheroapi.CrudCheropatilla/RecycleActivity", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleActivityClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleActivityClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleActivityClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) RecycleSaved(ctx context1.Context, in *SavedPattern, opts ...grpc.CallOption) (CrudCheropatilla_RecycleSavedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[3], "/cheroapi.CrudCheropatilla/RecycleSaved", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaRecycleSavedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_RecycleSavedClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaRecycleSavedClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaRecycleSavedClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) Upvote(ctx context1.Context, in *UpvoteRequest, opts ...grpc.CallOption) (CrudCheropatilla_UpvoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[4], "/cheroapi.CrudCheropatilla/Upvote", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaUpvoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_UpvoteClient interface {
	Recv() (*NotifyUser, error)
	grpc.ClientStream
}

type crudCheropatillaUpvoteClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaUpvoteClient) Recv() (*NotifyUser, error) {
	m := new(NotifyUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) UndoUpvote(ctx context1.Context, in *UndoUpvoteRequest, opts ...grpc.CallOption) (*UndoUpvoteResponse, error) {
	out := new(UndoUpvoteResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/UndoUpvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) Comment(ctx context1.Context, in *CommentRequest, opts ...grpc.CallOption) (CrudCheropatilla_CommentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[5], "/cheroapi.CrudCheropatilla/Comment", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaCommentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_CommentClient interface {
	Recv() (*NotifyUser, error)
	grpc.ClientStream
}

type crudCheropatillaCommentClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaCommentClient) Recv() (*NotifyUser, error) {
	m := new(NotifyUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) UpdateContent(ctx context1.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (CrudCheropatilla_UpdateContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[6], "/cheroapi.CrudCheropatilla/UpdateContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaUpdateContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_UpdateContentClient interface {
	Recv() (*NotifyUser, error)
	grpc.ClientStream
}

type crudCheropatillaUpdateContentClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaUpdateContentClient) Recv() (*NotifyUser, error) {
	m := new(NotifyUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) DeleteContent(ctx context1.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*DeleteContentResponse, error) {
	out := new(DeleteContentResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/DeleteContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) CreateThread(ctx context1.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	out := new(CreateThreadResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetUserHeaderData(ctx context1.Context, in *GetBasicUserDataRequest, opts ...grpc.CallOption) (*UserHeaderData, error) {
	out := new(UserHeaderData)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/GetUserHeaderData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) UpdateBasicUserData(ctx context1.Context, in *UpdateBasicUserDataRequest, opts ...grpc.CallOption) (*UpdateBasicUserDataResponse, error) {
	out := new(UpdateBasicUserDataResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/UpdateBasicUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetBasicUserData(ctx context1.Context, in *GetBasicUserDataRequest, opts ...grpc.CallOption) (*dataformat.BasicUserData, error) {
	out := new(dataformat.BasicUserData)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/GetBasicUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetUserFollowingIds(ctx context1.Context, in *GetBasicUserDataRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/GetUserFollowingIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetThread(ctx context1.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ContentData, error) {
	out := new(ContentData)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetSubcomments(ctx context1.Context, in *GetSubcommentsRequest, opts ...grpc.CallOption) (CrudCheropatilla_GetSubcommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrudCheropatilla_serviceDesc.Streams[7], "/cheroapi.CrudCheropatilla/GetSubcomments", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudCheropatillaGetSubcommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudCheropatilla_GetSubcommentsClient interface {
	Recv() (*ContentRule, error)
	grpc.ClientStream
}

type crudCheropatillaGetSubcommentsClient struct {
	grpc.ClientStream
}

func (x *crudCheropatillaGetSubcommentsClient) Recv() (*ContentRule, error) {
	m := new(ContentRule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudCheropatillaClient) MarkAllAsRead(ctx context1.Context, in *ReadNotifsRequest, opts ...grpc.CallOption) (*ReadNotifsResponse, error) {
	out := new(ReadNotifsResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/MarkAllAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) ClearNotifs(ctx context1.Context, in *ClearNotifsRequest, opts ...grpc.CallOption) (*ClearNotifsResponse, error) {
	out := new(ClearNotifsResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/ClearNotifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) FollowUser(ctx context1.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) UnfollowUser(ctx context1.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	out := new(UnfollowUserResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/UnfollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) SaveThread(ctx context1.Context, in *SaveThreadRequest, opts ...grpc.CallOption) (*SaveThreadResponse, error) {
	out := new(SaveThreadResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/SaveThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) UnsaveThread(ctx context1.Context, in *UnsaveThreadRequest, opts ...grpc.CallOption) (*UnsaveThreadResponse, error) {
	out := new(UnsaveThreadResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/UnsaveThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) ViewUsers(ctx context1.Context, in *ViewUsersRequest, opts ...grpc.CallOption) (*ViewUsersResponse, error) {
	out := new(ViewUsersResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/ViewUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) ViewUserByUsername(ctx context1.Context, in *ViewUserByUsernameRequest, opts ...grpc.CallOption) (*ViewUserResponse, error) {
	out := new(ViewUserResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/ViewUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) GetDashboardData(ctx context1.Context, in *GetDashboardDataRequest, opts ...grpc.CallOption) (*DashboardData, error) {
	out := new(DashboardData)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/GetDashboardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) Login(ctx context1.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudCheropatillaClient) RegisterUser(ctx context1.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/cheroapi.CrudCheropatilla/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudCheropatillaServer is the server API for CrudCheropatilla service.
type CrudCheropatillaServer interface {
	// Get new feed of either threads in a section or comments in a thread.
	//
	// In case of being called in the context of a section, it returns only
	// threads that are currently active, as opposed to comments in a thread,
	// in which case the type of content is considered always active, despite
	// the current status of the thread they belong to.
	//
	// It may return a codes.InvalidArgument error in case of being passed a
	// request with a nil ContentContext or a codes.Internal error in case of
	// a database querying or network issue.
	RecycleContent(*ContentPattern, CrudCheropatilla_RecycleContentServer) error
	// Get new feed of threads in general (from multiple sections)
	RecycleGeneral(*GeneralPattern, CrudCheropatilla_RecycleGeneralServer) error
	// Get new activity from either multiple users or a single user.
	RecycleActivity(*ActivityPattern, CrudCheropatilla_RecycleActivityServer) error
	// Get new feed of saved threads of a user
	RecycleSaved(*SavedPattern, CrudCheropatilla_RecycleSavedServer) error
	// Post upvote on thread, comment or subcomment
	Upvote(*UpvoteRequest, CrudCheropatilla_UpvoteServer) error
	// Undo upvote on a thread, comment or subcomment
	UndoUpvote(context1.Context, *UndoUpvoteRequest) (*UndoUpvoteResponse, error)
	// Post comment on a thread or in a comment
	Comment(*CommentRequest, CrudCheropatilla_CommentServer) error
	// Update a thread, comment or subcomment
	UpdateContent(*UpdateContentRequest, CrudCheropatilla_UpdateContentServer) error
	// Delete a thread, comment or subcomment
	DeleteContent(context1.Context, *DeleteContentRequest) (*DeleteContentResponse, error)
	// Post a thread to create
	CreateThread(context1.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	// Get a user's basic data to be displayed in the header navigation section
	GetUserHeaderData(context1.Context, *GetBasicUserDataRequest) (*UserHeaderData, error)
	// Update a user's basic data
	UpdateBasicUserData(context1.Context, *UpdateBasicUserDataRequest) (*UpdateBasicUserDataResponse, error)
	// Get a user's basic data to be dislayed in page
	GetBasicUserData(context1.Context, *GetBasicUserDataRequest) (*dataformat.BasicUserData, error)
	// Get the list of users followed by a given user
	GetUserFollowingIds(context1.Context, *GetBasicUserDataRequest) (*UserList, error)
	// Get a single thread
	GetThread(context1.Context, *GetThreadRequest) (*ContentData, error)
	// Get a comment's comments
	GetSubcomments(*GetSubcommentsRequest, CrudCheropatilla_GetSubcommentsServer) error
	// Mark unread notifications as read
	MarkAllAsRead(context1.Context, *ReadNotifsRequest) (*ReadNotifsResponse, error)
	// Clear all the notifications
	ClearNotifs(context1.Context, *ClearNotifsRequest) (*ClearNotifsResponse, error)
	// Follow a user
	FollowUser(context1.Context, *FollowUserRequest) (*FollowUserResponse, error)
	// Unfollow a user
	UnfollowUser(context1.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error)
	// Request to save thread
	SaveThread(context1.Context, *SaveThreadRequest) (*SaveThreadResponse, error)
	// Request to remove thread from user's list of saved threads
	UnsaveThread(context1.Context, *UnsaveThreadRequest) (*UnsaveThreadResponse, error)
	// Get either following or followers users' basic data
	ViewUsers(context1.Context, *ViewUsersRequest) (*ViewUsersResponse, error)
	// Get username basic data, following, followers and threads created
	ViewUserByUsername(context1.Context, *ViewUserByUsernameRequest) (*ViewUserResponse, error)
	// Get dashboard data for a given user
	GetDashboardData(context1.Context, *GetDashboardDataRequest) (*DashboardData, error)
	// Validate user credentials to login
	Login(context1.Context, *LoginRequest) (*LoginResponse, error)
	// Register new user
	RegisterUser(context1.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
}

// UnimplementedCrudCheropatillaServer can be embedded to have forward compatible implementations.
type UnimplementedCrudCheropatillaServer struct {
}

func (*UnimplementedCrudCheropatillaServer) RecycleContent(req *ContentPattern, srv CrudCheropatilla_RecycleContentServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleContent not implemented")
}
func (*UnimplementedCrudCheropatillaServer) RecycleGeneral(req *GeneralPattern, srv CrudCheropatilla_RecycleGeneralServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleGeneral not implemented")
}
func (*UnimplementedCrudCheropatillaServer) RecycleActivity(req *ActivityPattern, srv CrudCheropatilla_RecycleActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleActivity not implemented")
}
func (*UnimplementedCrudCheropatillaServer) RecycleSaved(req *SavedPattern, srv CrudCheropatilla_RecycleSavedServer) error {
	return status.Errorf(codes.Unimplemented, "method RecycleSaved not implemented")
}
func (*UnimplementedCrudCheropatillaServer) Upvote(req *UpvoteRequest, srv CrudCheropatilla_UpvoteServer) error {
	return status.Errorf(codes.Unimplemented, "method Upvote not implemented")
}
func (*UnimplementedCrudCheropatillaServer) UndoUpvote(ctx context1.Context, req *UndoUpvoteRequest) (*UndoUpvoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoUpvote not implemented")
}
func (*UnimplementedCrudCheropatillaServer) Comment(req *CommentRequest, srv CrudCheropatilla_CommentServer) error {
	return status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (*UnimplementedCrudCheropatillaServer) UpdateContent(req *UpdateContentRequest, srv CrudCheropatilla_UpdateContentServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateContent not implemented")
}
func (*UnimplementedCrudCheropatillaServer) DeleteContent(ctx context1.Context, req *DeleteContentRequest) (*DeleteContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContent not implemented")
}
func (*UnimplementedCrudCheropatillaServer) CreateThread(ctx context1.Context, req *CreateThreadRequest) (*CreateThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetUserHeaderData(ctx context1.Context, req *GetBasicUserDataRequest) (*UserHeaderData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserHeaderData not implemented")
}
func (*UnimplementedCrudCheropatillaServer) UpdateBasicUserData(ctx context1.Context, req *UpdateBasicUserDataRequest) (*UpdateBasicUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicUserData not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetBasicUserData(ctx context1.Context, req *GetBasicUserDataRequest) (*dataformat.BasicUserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicUserData not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetUserFollowingIds(ctx context1.Context, req *GetBasicUserDataRequest) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowingIds not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetThread(ctx context1.Context, req *GetThreadRequest) (*ContentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetSubcomments(req *GetSubcommentsRequest, srv CrudCheropatilla_GetSubcommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSubcomments not implemented")
}
func (*UnimplementedCrudCheropatillaServer) MarkAllAsRead(ctx context1.Context, req *ReadNotifsRequest) (*ReadNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllAsRead not implemented")
}
func (*UnimplementedCrudCheropatillaServer) ClearNotifs(ctx context1.Context, req *ClearNotifsRequest) (*ClearNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearNotifs not implemented")
}
func (*UnimplementedCrudCheropatillaServer) FollowUser(ctx context1.Context, req *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (*UnimplementedCrudCheropatillaServer) UnfollowUser(ctx context1.Context, req *UnfollowUserRequest) (*UnfollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (*UnimplementedCrudCheropatillaServer) SaveThread(ctx context1.Context, req *SaveThreadRequest) (*SaveThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveThread not implemented")
}
func (*UnimplementedCrudCheropatillaServer) UnsaveThread(ctx context1.Context, req *UnsaveThreadRequest) (*UnsaveThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsaveThread not implemented")
}
func (*UnimplementedCrudCheropatillaServer) ViewUsers(ctx context1.Context, req *ViewUsersRequest) (*ViewUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUsers not implemented")
}
func (*UnimplementedCrudCheropatillaServer) ViewUserByUsername(ctx context1.Context, req *ViewUserByUsernameRequest) (*ViewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUserByUsername not implemented")
}
func (*UnimplementedCrudCheropatillaServer) GetDashboardData(ctx context1.Context, req *GetDashboardDataRequest) (*DashboardData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardData not implemented")
}
func (*UnimplementedCrudCheropatillaServer) Login(ctx context1.Context, req *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedCrudCheropatillaServer) RegisterUser(ctx context1.Context, req *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}

func RegisterCrudCheropatillaServer(s *grpc.Server, srv CrudCheropatillaServer) {
	s.RegisterService(&_CrudCheropatilla_serviceDesc, srv)
}

func _CrudCheropatilla_RecycleContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleContent(m, &crudCheropatillaRecycleContentServer{stream})
}

type CrudCheropatilla_RecycleContentServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleContentServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleContentServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_RecycleGeneral_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GeneralPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleGeneral(m, &crudCheropatillaRecycleGeneralServer{stream})
}

type CrudCheropatilla_RecycleGeneralServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleGeneralServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleGeneralServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_RecycleActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActivityPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleActivity(m, &crudCheropatillaRecycleActivityServer{stream})
}

type CrudCheropatilla_RecycleActivityServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleActivityServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleActivityServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_RecycleSaved_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SavedPattern)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).RecycleSaved(m, &crudCheropatillaRecycleSavedServer{stream})
}

type CrudCheropatilla_RecycleSavedServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaRecycleSavedServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaRecycleSavedServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_Upvote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpvoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).Upvote(m, &crudCheropatillaUpvoteServer{stream})
}

type CrudCheropatilla_UpvoteServer interface {
	Send(*NotifyUser) error
	grpc.ServerStream
}

type crudCheropatillaUpvoteServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaUpvoteServer) Send(m *NotifyUser) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_UndoUpvote_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoUpvoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).UndoUpvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/UndoUpvote",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).UndoUpvote(ctx, req.(*UndoUpvoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_Comment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).Comment(m, &crudCheropatillaCommentServer{stream})
}

type CrudCheropatilla_CommentServer interface {
	Send(*NotifyUser) error
	grpc.ServerStream
}

type crudCheropatillaCommentServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaCommentServer) Send(m *NotifyUser) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_UpdateContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).UpdateContent(m, &crudCheropatillaUpdateContentServer{stream})
}

type CrudCheropatilla_UpdateContentServer interface {
	Send(*NotifyUser) error
	grpc.ServerStream
}

type crudCheropatillaUpdateContentServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaUpdateContentServer) Send(m *NotifyUser) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_DeleteContent_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/DeleteContent",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).DeleteContent(ctx, req.(*DeleteContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_CreateThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/CreateThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetUserHeaderData_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).GetUserHeaderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/GetUserHeaderData",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).GetUserHeaderData(ctx, req.(*GetBasicUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_UpdateBasicUserData_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasicUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).UpdateBasicUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/UpdateBasicUserData",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).UpdateBasicUserData(ctx, req.(*UpdateBasicUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetBasicUserData_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).GetBasicUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/GetBasicUserData",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).GetBasicUserData(ctx, req.(*GetBasicUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetUserFollowingIds_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).GetUserFollowingIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/GetUserFollowingIds",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).GetUserFollowingIds(ctx, req.(*GetBasicUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/GetThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetSubcomments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSubcommentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudCheropatillaServer).GetSubcomments(m, &crudCheropatillaGetSubcommentsServer{stream})
}

type CrudCheropatilla_GetSubcommentsServer interface {
	Send(*ContentRule) error
	grpc.ServerStream
}

type crudCheropatillaGetSubcommentsServer struct {
	grpc.ServerStream
}

func (x *crudCheropatillaGetSubcommentsServer) Send(m *ContentRule) error {
	return x.ServerStream.SendMsg(m)
}

func _CrudCheropatilla_MarkAllAsRead_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).MarkAllAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/MarkAllAsRead",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).MarkAllAsRead(ctx, req.(*ReadNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_ClearNotifs_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).ClearNotifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/ClearNotifs",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).ClearNotifs(ctx, req.(*ClearNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_FollowUser_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/FollowUser",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_UnfollowUser_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/UnfollowUser",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_SaveThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).SaveThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/SaveThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).SaveThread(ctx, req.(*SaveThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_UnsaveThread_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsaveThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).UnsaveThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/UnsaveThread",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).UnsaveThread(ctx, req.(*UnsaveThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_ViewUsers_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).ViewUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/ViewUsers",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).ViewUsers(ctx, req.(*ViewUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_ViewUserByUsername_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).ViewUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/ViewUserByUsername",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).ViewUserByUsername(ctx, req.(*ViewUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_GetDashboardData_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).GetDashboardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/GetDashboardData",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).GetDashboardData(ctx, req.(*GetDashboardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_Login_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/Login",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudCheropatilla_RegisterUser_Handler(srv interface{}, ctx context1.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudCheropatillaServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheroapi.CrudCheropatilla/RegisterUser",
	}
	handler := func(ctx context1.Context, req interface{}) (interface{}, error) {
		return srv.(CrudCheropatillaServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrudCheropatilla_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheroapi.CrudCheropatilla",
	HandlerType: (*CrudCheropatillaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UndoUpvote",
			Handler:    _CrudCheropatilla_UndoUpvote_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _CrudCheropatilla_DeleteContent_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _CrudCheropatilla_CreateThread_Handler,
		},
		{
			MethodName: "GetUserHeaderData",
			Handler:    _CrudCheropatilla_GetUserHeaderData_Handler,
		},
		{
			MethodName: "UpdateBasicUserData",
			Handler:    _CrudCheropatilla_UpdateBasicUserData_Handler,
		},
		{
			MethodName: "GetBasicUserData",
			Handler:    _CrudCheropatilla_GetBasicUserData_Handler,
		},
		{
			MethodName: "GetUserFollowingIds",
			Handler:    _CrudCheropatilla_GetUserFollowingIds_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _CrudCheropatilla_GetThread_Handler,
		},
		{
			MethodName: "MarkAllAsRead",
			Handler:    _CrudCheropatilla_MarkAllAsRead_Handler,
		},
		{
			MethodName: "ClearNotifs",
			Handler:    _CrudCheropatilla_ClearNotifs_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _CrudCheropatilla_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _CrudCheropatilla_UnfollowUser_Handler,
		},
		{
			MethodName: "SaveThread",
			Handler:    _CrudCheropatilla_SaveThread_Handler,
		},
		{
			MethodName: "UnsaveThread",
			Handler:    _CrudCheropatilla_UnsaveThread_Handler,
		},
		{
			MethodName: "ViewUsers",
			Handler:    _CrudCheropatilla_ViewUsers_Handler,
		},
		{
			MethodName: "ViewUserByUsername",
			Handler:    _CrudCheropatilla_ViewUserByUsername_Handler,
		},
		{
			MethodName: "GetDashboardData",
			Handler:    _CrudCheropatilla_GetDashboardData_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CrudCheropatilla_Login_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _CrudCheropatilla_RegisterUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecycleContent",
			Handler:       _CrudCheropatilla_RecycleContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecycleGeneral",
			Handler:       _CrudCheropatilla_RecycleGeneral_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecycleActivity",
			Handler:       _CrudCheropatilla_RecycleActivity_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecycleSaved",
			Handler:       _CrudCheropatilla_RecycleSaved_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upvote",
			Handler:       _CrudCheropatilla_Upvote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Comment",
			Handler:       _CrudCheropatilla_Comment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateContent",
			Handler:       _CrudCheropatilla_UpdateContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSubcomments",
			Handler:       _CrudCheropatilla_GetSubcomments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cheroapi.proto",
}
