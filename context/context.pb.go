// Code generated by protoc-gen-go. DO NOT EDIT.
// source: context.proto

// package context defines different context types that hold information
// about the place at which an event occurs or where content should be
// stored in and retrieved from.

package context

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Context struct {
	// Types that are valid to be assigned to Ctx:
	//	*Context_SectionCtx
	//	*Context_ThreadCtx
	//	*Context_CommentCtx
	//	*Context_SubcommentCtx
	Ctx                  isContext_Ctx `protobuf_oneof:"ctx"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Context) Reset()         { *m = Context{} }
func (m *Context) String() string { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()    {}
func (*Context) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{0}
}

func (m *Context) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Context.Unmarshal(m, b)
}
func (m *Context) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Context.Marshal(b, m, deterministic)
}
func (m *Context) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Context.Merge(m, src)
}
func (m *Context) XXX_Size() int {
	return xxx_messageInfo_Context.Size(m)
}
func (m *Context) XXX_DiscardUnknown() {
	xxx_messageInfo_Context.DiscardUnknown(m)
}

var xxx_messageInfo_Context proto.InternalMessageInfo

type isContext_Ctx interface {
	isContext_Ctx()
}

type Context_SectionCtx struct {
	SectionCtx *Section `protobuf:"bytes,1,opt,name=section_ctx,json=sectionCtx,proto3,oneof"`
}

type Context_ThreadCtx struct {
	ThreadCtx *Thread `protobuf:"bytes,2,opt,name=thread_ctx,json=threadCtx,proto3,oneof"`
}

type Context_CommentCtx struct {
	CommentCtx *Comment `protobuf:"bytes,3,opt,name=comment_ctx,json=commentCtx,proto3,oneof"`
}

type Context_SubcommentCtx struct {
	SubcommentCtx *Subcomment `protobuf:"bytes,4,opt,name=subcomment_ctx,json=subcommentCtx,proto3,oneof"`
}

func (*Context_SectionCtx) isContext_Ctx() {}

func (*Context_ThreadCtx) isContext_Ctx() {}

func (*Context_CommentCtx) isContext_Ctx() {}

func (*Context_SubcommentCtx) isContext_Ctx() {}

func (m *Context) GetCtx() isContext_Ctx {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *Context) GetSectionCtx() *Section {
	if x, ok := m.GetCtx().(*Context_SectionCtx); ok {
		return x.SectionCtx
	}
	return nil
}

func (m *Context) GetThreadCtx() *Thread {
	if x, ok := m.GetCtx().(*Context_ThreadCtx); ok {
		return x.ThreadCtx
	}
	return nil
}

func (m *Context) GetCommentCtx() *Comment {
	if x, ok := m.GetCtx().(*Context_CommentCtx); ok {
		return x.CommentCtx
	}
	return nil
}

func (m *Context) GetSubcommentCtx() *Subcomment {
	if x, ok := m.GetCtx().(*Context_SubcommentCtx); ok {
		return x.SubcommentCtx
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Context) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Context_SectionCtx)(nil),
		(*Context_ThreadCtx)(nil),
		(*Context_CommentCtx)(nil),
		(*Context_SubcommentCtx)(nil),
	}
}

// A Section is the highest level and just has the name of the section.
type Section struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Section) Reset()         { *m = Section{} }
func (m *Section) String() string { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()    {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{1}
}

func (m *Section) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Section.Unmarshal(m, b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Section.Marshal(b, m, deterministic)
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return xxx_messageInfo_Section.Size(m)
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A Thread is inside of a section and has a thread identifier unique to
// that section.
type Thread struct {
	SectionCtx           *Section `protobuf:"bytes,1,opt,name=section_ctx,json=sectionCtx,proto3" json:"section_ctx,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thread) Reset()         { *m = Thread{} }
func (m *Thread) String() string { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()    {}
func (*Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{2}
}

func (m *Thread) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thread.Unmarshal(m, b)
}
func (m *Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thread.Marshal(b, m, deterministic)
}
func (m *Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thread.Merge(m, src)
}
func (m *Thread) XXX_Size() int {
	return xxx_messageInfo_Thread.Size(m)
}
func (m *Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_Thread proto.InternalMessageInfo

func (m *Thread) GetSectionCtx() *Section {
	if m != nil {
		return m.SectionCtx
	}
	return nil
}

func (m *Thread) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A Comment is inside of a thread and has a comment identifier unique to
// that thread.
type Comment struct {
	ThreadCtx            *Thread  `protobuf:"bytes,1,opt,name=thread_ctx,json=threadCtx,proto3" json:"thread_ctx,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{3}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetThreadCtx() *Thread {
	if m != nil {
		return m.ThreadCtx
	}
	return nil
}

func (m *Comment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A Subcomment is inside of a comment and has a subcomment identifier
// unique to that comment.
type Subcomment struct {
	CommentCtx           *Comment `protobuf:"bytes,1,opt,name=comment_ctx,json=commentCtx,proto3" json:"comment_ctx,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subcomment) Reset()         { *m = Subcomment{} }
func (m *Subcomment) String() string { return proto.CompactTextString(m) }
func (*Subcomment) ProtoMessage()    {}
func (*Subcomment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b64063be2fc89884, []int{4}
}

func (m *Subcomment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subcomment.Unmarshal(m, b)
}
func (m *Subcomment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subcomment.Marshal(b, m, deterministic)
}
func (m *Subcomment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subcomment.Merge(m, src)
}
func (m *Subcomment) XXX_Size() int {
	return xxx_messageInfo_Subcomment.Size(m)
}
func (m *Subcomment) XXX_DiscardUnknown() {
	xxx_messageInfo_Subcomment.DiscardUnknown(m)
}

var xxx_messageInfo_Subcomment proto.InternalMessageInfo

func (m *Subcomment) GetCommentCtx() *Comment {
	if m != nil {
		return m.CommentCtx
	}
	return nil
}

func (m *Subcomment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Context)(nil), "context.Context")
	proto.RegisterType((*Section)(nil), "context.Section")
	proto.RegisterType((*Thread)(nil), "context.Thread")
	proto.RegisterType((*Comment)(nil), "context.Comment")
	proto.RegisterType((*Subcomment)(nil), "context.Subcomment")
}

func init() {
	proto.RegisterFile("context.proto", fileDescriptor_b64063be2fc89884)
}

var fileDescriptor_b64063be2fc89884 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x4e, 0x84, 0x40,
	0x10, 0x87, 0x0f, 0x4e, 0x8f, 0x30, 0xe4, 0xd0, 0xac, 0x8d, 0x76, 0x86, 0x4a, 0x63, 0x04, 0x95,
	0xd6, 0xea, 0x68, 0x20, 0x16, 0x26, 0x68, 0x65, 0x63, 0x64, 0xd9, 0x00, 0x89, 0xb0, 0x06, 0x06,
	0xc3, 0x33, 0xfb, 0x14, 0x86, 0x61, 0x3d, 0xfe, 0xe4, 0x0a, 0x3b, 0x60, 0xe6, 0x9b, 0x99, 0xdf,
	0x17, 0x60, 0xcb, 0x65, 0x85, 0xa2, 0x43, 0xf7, 0xab, 0x96, 0x28, 0x99, 0xa1, 0x5e, 0x9d, 0x1f,
	0x0d, 0x8c, 0x60, 0x78, 0x66, 0x3e, 0x58, 0x8d, 0xe0, 0x58, 0xc8, 0xea, 0x9d, 0x63, 0x77, 0xae,
	0x5d, 0x6a, 0x57, 0xd6, 0xc3, 0xa9, 0xfb, 0x47, 0xbe, 0x0c, 0xb5, 0x70, 0x15, 0x83, 0x6a, 0x0b,
	0xb0, 0x63, 0x77, 0x00, 0x98, 0xd7, 0xe2, 0x23, 0x25, 0x46, 0x27, 0xe6, 0x64, 0xcf, 0xbc, 0x52,
	0x29, 0x5c, 0xc5, 0xe6, 0xd0, 0xd4, 0x13, 0x3e, 0x58, 0x5c, 0x96, 0xa5, 0xa8, 0x90, 0x90, 0xf5,
	0x62, 0x4d, 0x30, 0xd4, 0xfa, 0x35, 0xaa, 0xad, 0x87, 0x1e, 0xc1, 0x6e, 0xda, 0x64, 0xca, 0x1d,
	0x11, 0x77, 0x36, 0x9e, 0xb7, 0x2f, 0x87, 0xab, 0x78, 0x3b, 0x36, 0x07, 0xd8, 0xed, 0x8e, 0x61,
	0xcd, 0xb1, 0x73, 0x2e, 0xc0, 0x50, 0x21, 0x98, 0x0d, 0x7a, 0x94, 0x52, 0x44, 0x33, 0xd6, 0xa3,
	0xd4, 0x79, 0x82, 0xcd, 0x70, 0x2b, 0xbb, 0xff, 0x97, 0x85, 0x99, 0x03, 0x1b, 0xf4, 0x22, 0xa5,
	0xec, 0x66, 0xac, 0x17, 0xa9, 0x13, 0xf5, 0x4e, 0x69, 0x39, 0x73, 0x67, 0x7a, 0xb4, 0x83, 0x7a,
	0xa6, 0x72, 0x96, 0xa3, 0x9e, 0x01, 0xc6, 0x60, 0xfd, 0x6d, 0x53, 0x05, 0xda, 0x61, 0x75, 0x33,
	0x71, 0x8b, 0x81, 0xbb, 0x9b, 0xb7, 0xeb, 0xac, 0xc0, 0xbc, 0x4d, 0x5c, 0x2e, 0x4b, 0xef, 0xb3,
	0x2d, 0x9a, 0xac, 0xfd, 0x16, 0x1e, 0xcf, 0x45, 0x2d, 0xe9, 0xdf, 0xb8, 0xcd, 0xa4, 0xa7, 0x06,
	0x26, 0x1b, 0xfa, 0xe2, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x21, 0x21, 0x8b, 0xf4, 0x3e, 0x02,
	0x00, 0x00,
}
